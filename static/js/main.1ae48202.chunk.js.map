{"version":3,"sources":["assets/pastel2.png","components/Video.jsx","components/Location.jsx","assets/nucleus.mp4","assets/mitochondrion.mp4","assets/golgi_body.mp4","components/RobotMap.jsx","components/RobotDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["Video","props","muted","autoPlay","playsInline","loop","src","height","width","style","display","boxShadow","borderRadius","Location","console","log","x","y","Figure","Caption","marginTop","caption","Button","variant","fontSize","disabled","Spinner","animation","size","marginRight","Math","round","theta","lastFetched","RobotMap","intervalId","state","error","isLoaded","location","nucleus","pose","this","setState","mitochondrion","golgi_body","a","name","fetch","then","res","json","type","content","date","Date","toLocaleTimeString","updateLocation","JSON","stringify","setInterval","fetchPose","bind","message","React","Component","RobotDisplay","selectedRobot","queryRobot","robots","robot","marginBottom","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","renderFromQueryString","renderFromApi","getQuery","query","URLSearchParams","window","search","get","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ae48202.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pastel2.e1c70db9.png\";","import React from 'react';\n\nfunction Video(props) {\n    return <video\n                muted\n                autoPlay\n                playsInline\n                loop\n                src={props.src}\n                height={\"100%\"}\n                width={\"100%\"}\n                style={{\n                    display: \"block\",\n                    boxShadow: \"0px 1px 17px 0px #ffffff38\",\n                    borderRadius: \"5px\"}}>\n            </video>\n}\n\nexport default Video;","import React from 'react';\nimport {Figure, Spinner, Badge, Alert, Button} from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\n\nfunction Location(props) {\n    console.log(`x=${props.x},y=${props.y}`);\n    return <div>\n                <Figure>\n                    <Video src={props.src}></Video>\n                    <Figure.Caption style={{marginTop: \"10px\"}}>\n                    {props.caption}\n                    </Figure.Caption>\n                </Figure>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>\n                    <Spinner animation=\"grow\" variant=\"light\" size=\"sm\" style={{marginRight: \"3%\"}} />\n                    Location: (x={Math.round(props.x)}, y={Math.round(props.y)}, theta={Math.round(props.theta)})\n                </Button>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>Last updated at {props.lastFetched === null ? \"\" : props.lastFetched}</Button>\n            </div>\n}\n\nexport default Location;","export default __webpack_public_path__ + \"static/media/nucleus.4a8c0d4e.mp4\";","export default __webpack_public_path__ + \"static/media/mitochondrion.e87f2a95.mp4\";","export default __webpack_public_path__ + \"static/media/golgi_body.810b2da0.mp4\";","import React from 'react';\nimport {Alert, Spinner, Span, Badge} from 'react-bootstrap';\nimport Location from './Location';\nimport nucleus from '../assets/nucleus.mp4';\nimport mitochondrion from '../assets/mitochondrion.mp4';\nimport golgi_body from '../assets/golgi_body.mp4';\n\nclass RobotMap extends React.Component {\n\n    intervalId = 0;\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: \"\",\n        y: \"\",\n        theta: \"\",\n        location: nucleus,\n        caption: \"Location: nucleus. The knowledge centre of the cell.\",\n        lastFetched: null\n      };\n    }\n\n    updateLocation(pose) {\n      if (pose.x < 15) {\n        this.setState({\n          location: nucleus,\n          caption: \"The knowledge centre of the cell.\"\n        });\n      } else if (pose.x < 100) {\n        this.setState({\n          location: mitochondrion,\n          caption: `The powerhouse of the cell.`\n        });\n      } else {\n        this.setState({\n          location: golgi_body,\n          caption: \"The packaging warehouse of the cell.\"\n        });\n      }\n    }\n\n  async fetchPose() {\n        const name = this.props.name;\n        fetch(`https://cellulo-live.herokuapp.com/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let pose = res.content;\n                    var date = new Date();\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta,\n                        lastFetched: date.toLocaleTimeString('en-US')\n                    });\n                    this.updateLocation(pose);\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error: error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.fetchPose.bind(this), 500);\n        this.fetchPose();\n    }\n\n    render() {\n      const { error, isLoaded, x, y, theta, location, caption, lastFetched } = this.state;\n      if (this.props.name === \"bloop\") {\n        console.log(`x=${x},y=${y}`);\n      }\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <Location \n                src={location} \n                caption={caption} \n                lastFetched={lastFetched}\n                name={this.props.name}\n                x={x}\n                y={y}\n                theta={theta}>\n            </Location>\n          </div>\n        );\n      }\n    }\n  }\nexport default RobotMap;","import React from 'react';\nimport {Form, Badge, Button} from 'react-bootstrap';\nimport RobotMap from './RobotMap';\n\nclass RobotDisplay extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        selectedRobot: \"\"\n      };\n    }\n\n    componentDidMount() {\n      if (this.props.queryRobot != null) {\n        return;\n      }\n      fetch(`https://cellulo-live.herokuapp.com/robots/`)\n          .then(res => res.json())\n          .then(\n          (res) => {\n              if (res.type === 'success') {\n                  let robots = res.content;\n                  this.setState({\n                      isLoaded: true,\n                      robots: robots,\n                      selectedRobot: robots[0]\n                  });                    \n              } else {\n                  console.log(\"Non-success:\" + JSON.stringify(res));\n              }\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              this.setState({\n              isLoaded: true,\n              error\n              });\n          }\n          )\n        \n    }\n\n    setSelectedRobot(robot) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n\n    renderFromQueryString() {\n      let name = this.props.queryRobot;\n      return (\n        <div>\n            <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n              Player {name}\n            </Button>\n            <RobotMap name={name}></RobotMap> \n        </div>\n      );\n    }\n\n    renderFromApi() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n              <RobotMap name={selectedRobot}></RobotMap> \n              <Form.Group>\n                  <Form.Label>Tracking player:</Form.Label>\n                  <Form.Control as=\"select\"\n                    onChange={e => this.setSelectedRobot(e.target.value)}>\n                  {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                  </Form.Control>\n              </Form.Group>\n          </div>\n        );      \n      }\n    }\n  \n    render() {\n      if (this.props.queryRobot != null) {\n        return this.renderFromQueryString();\n      }\n      return this.renderFromApi();\n    }\n  }\n\n\n\nexport default RobotDisplay;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport RobotDisplay from './components/RobotDisplay';\nimport { render } from '@testing-library/react';\n\nfunction getQuery(query) {\n  return new URLSearchParams(window.location.search).get(query);\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p></p>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <RobotDisplay queryRobot={getQuery('left')}></RobotDisplay>\n              </div>\n              <div className=\"col offset-1\">\n                <RobotDisplay queryRobot={getQuery('right')}></RobotDisplay>\n              </div>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}