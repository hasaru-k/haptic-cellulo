{"version":3,"sources":["components/UI/Video.tsx","components/UI/GolgiBody.tsx","components/UI/Cytosol.tsx","components/UI/Nucleus.tsx","components/UI/Mitochondrion.tsx","components/UI/Lysosome.tsx","components/UI/Location.tsx","App.tsx","components/LocationComponent.tsx","assets/nucleus.mp4","assets/mitochondrion.mp4","assets/golgi_body.mp4","assets/lysosome.mp4","assets/cytosol.mp4","components/RobotDisplay.tsx","components/Activity.tsx","reportWebVitals.js","index.js"],"names":["Video","props","muted","autoPlay","playsInline","loop","src","height","width","style","display","boxShadow","borderRadius","GolgiBody","Carousel","indicators","touch","Item","marginLeft","textAlign","Cytosol","interval","Mitochondrion","Lysosome","getOrganelleCarousel","zone","Nucleus","Error","Mode","Location","className","Figure","marginBottom","marginTop","Button","variant","fontSize","disabled","name","Spinner","animation","size","marginRight","Math","round","x","y","theta","lastFetched","organelles","graphic","LocationComponent","intervalId","state","error","isLoaded","a","this","fetch","then","res","json","type","pose","content","date","Date","setState","toLocaleTimeString","console","log","JSON","stringify","setInterval","fetchPose","bind","message","String","React","Component","RobotDisplay","robots","selectedRobot","queryRobot","robot","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","renderFromQueryString","renderFromApi","Activity","responses","Questions","question","Q","ListGroup","horizontal","color","justifyContent","alignItems","App","mode","Explore","paddingTop","fontFamily","padding","Tabs","defaultActiveKey","Tab","eventKey","title","query","URLSearchParams","window","location","search","get","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAkBeA,MAhBf,SAAeC,GACX,OAAO,uBACKC,OAAK,EACLC,UAAQ,EACRC,aAAW,EACXC,MAAI,EACJC,IAAKL,EAAMK,IACXC,OAAQ,OACRC,MAAO,OACPC,MAAO,CACHC,QAAS,QACTC,UAAW,6BACXC,aAAc,U,OCYnBC,EAfsC,SAACZ,GAElD,OAAO,eAACa,EAAA,EAAD,CAAUC,YAAY,EAAOC,OAAO,EAApC,UACH,cAACF,EAAA,EAASG,KAAV,UACA,oBAAIR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAxD,oDAEA,cAACL,EAAA,EAASG,KAAV,UACA,oBAAIR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAxD,qIAEA,cAACL,EAAA,EAASG,KAAV,UACA,oBAAIR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAxD,uH,gBCeOC,EAzBkC,SAACnB,GAE9C,OAAO,eAACa,EAAA,EAAD,CAAUC,YAAY,EAAOC,OAAO,EAAOK,SAAU,KAArD,UACP,eAACP,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,4DAGA,cAAC,IAAD,sDAGA,cAAC,IAAD,0GAIJ,eAACL,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,gCAGA,cAAC,IAAD,qHCSOC,EA3BkC,SAACnB,GAE9C,OAAO,eAACa,EAAA,EAAD,CAAUC,YAAY,EAAOC,OAAO,EAAOK,SAAU,KAArD,UACH,eAACP,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,iDAGA,cAAC,IAAD,yHAGA,cAAC,IAAD,+HAKJ,eAACL,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,8JAIA,cAAC,IAAD,iGCKGG,EAzB8C,SAACrB,GAE1D,OAAO,eAACa,EAAA,EAAD,CAAUC,YAAY,EAAOC,OAAO,EAAOK,SAAU,KAArD,UACC,eAACP,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,6CAGA,cAAC,IAAD,uGAGA,cAAC,IAAD,qGAIJ,eAACL,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,gCAGA,cAAC,IAAD,+ICODI,EAzBoC,SAACtB,GAEhD,OAAO,eAACa,EAAA,EAAD,CAAUC,YAAY,EAAOC,OAAO,EAAOK,SAAU,KAArD,UACH,eAACP,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,sDAGA,cAAC,IAAD,wGAGA,cAAC,IAAD,gIAIJ,eAACL,EAAA,EAASG,KAAV,CAAeR,MAAO,CAACD,MAAO,MAAOU,WAAY,MAAOC,UAAW,UAAnE,UACI,cAAC,IAAD,sDAGA,cAAC,IAAD,wJCPZ,SAASK,EAAqBC,GAC1B,OAAQA,GACJ,IAAK,YACD,OAAO,cAAC,EAAD,IACX,IAAK,UACD,OAAO,cAACC,EAAD,IACX,IAAK,WACD,OAAO,cAAC,EAAD,IACX,IAAK,gBACD,OAAO,cAAC,EAAD,IACX,IAAK,UACL,IAAK,YACD,OAAO,cAAC,EAAD,IACX,QACI,MAAM,IAAIC,MAAM,iCAAmCF,IAI/D,IC1BKG,EDgDUC,EAtBoC,SAAC5B,GAEhD,OAAO,qBAAK6B,UAAU,MAAf,SACH,sBAAKA,UAAU,SAAf,UACI,cAACC,EAAA,EAAD,CAAQtB,MAAO,CAACuB,aAAc,OAAQC,UAAW,QAAjD,SACI,cAAC,EAAD,CAAO3B,IAAKL,EAAMK,QAEtB,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,YAAY1B,MAAO,CAAE2B,SAAU,SAAU5B,MAAO,QAAS6B,UAAQ,EAAjF,SACKpC,EAAMqC,OAEX,cAACJ,EAAA,EAAD,CAAQC,QAAQ,YAAY1B,MAAO,CAAE2B,SAAU,OAAQ5B,MAAO,OAAQW,UAAW,QAAUkB,UAAQ,EAAnG,SACKb,EAAqBvB,EAAMwB,QAEhC,eAACS,EAAA,EAAD,CAAQC,QAAQ,YAAY1B,MAAO,CAAE2B,SAAU,OAAQ5B,MAAO,QAAU6B,UAAQ,EAAhF,UACI,cAACE,EAAA,EAAD,CAASC,UAAU,OAAOL,QAAQ,QAAQM,KAAK,KAAKhC,MAAO,CAAEiC,YAAa,QAD9E,gBAEkBC,KAAKC,MAAM3C,EAAM4C,GAFnC,OAE2CF,KAAKC,MAAM3C,EAAM6C,GAF5D,WAEwEH,KAAKC,MAAM3C,EAAM8C,OAFzF,UAEwG9C,EAAMwB,KAF9G,OAIA,eAACS,EAAA,EAAD,CAAQC,QAAQ,YAAY1B,MAAO,CAAE2B,SAAU,OAAQ5B,MAAO,QAAU6B,UAAQ,EAAhF,6BAAwH,OAAtBpC,EAAM+C,YAAuB,GAAK/C,EAAM+C,qBEtClJC,EAAa,CACf,QAAY,CAACC,QCpBA,IAA0B,qCDqBvC,cAAiB,CAACA,QErBL,IAA0B,2CFsBvC,UAAa,CAACA,QGtBD,IAA0B,wCHuBvC,SAAY,CAACA,QIvBA,IAA0B,sCJwBvC,UAAa,CAACA,QKxBD,IAA0B,sCLyH1BC,E,kDA5EX,WAAYlD,GAAa,IAAD,8BACtB,cAAMA,IAFRmD,WAAkB,EAGhB,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVV,EAAG,EACHC,EAAG,EACHC,MAAO,EACPtB,KAAM,YACNnB,IAAK,GACL0C,YAAa,IAVO,E,oFAc1B,mCAAAQ,EAAA,sDACYlB,EAAOmB,KAAKxD,MAAMqC,KACxBoB,MAAM,gDAAD,OAAiDpB,IACjDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACC,GACG,GAAiB,YAAbA,EAAIE,KAAoB,CACxB,IAAIC,EAAOH,EAAII,QACXC,EAAO,IAAIC,KACf,EAAKC,SAAS,CACVZ,UAAU,EACVV,EAAGkB,EAAKlB,EACRC,EAAGiB,EAAKjB,EACRC,MAAOgB,EAAKhB,MACZtB,KAAMsC,EAAKtC,KACXuB,YAAaiB,EAAKG,mBAAmB,SACrC9D,IAAK2C,EAAWc,EAAKtC,MAAMyB,eAG/BmB,QAAQC,IAAI,eAAiBC,KAAKC,UAAUZ,OAMpD,SAACN,GACG,EAAKa,SAAS,CACZZ,UAAU,EACVD,MAAOA,OA5BvB,gD,qFAkCE,WACIG,KAAKL,WAAaqB,YAAYhB,KAAKiB,UAAUC,KAAKlB,MAAO,KACzDA,KAAKiB,c,oBAGT,WAAU,IAAD,EAC0DjB,KAAKJ,MAA9DC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUV,EADlB,EACkBA,EAAGC,EADrB,EACqBA,EAAGC,EADxB,EACwBA,MAAOtB,EAD/B,EAC+BA,KAAMnB,EADrC,EACqCA,IAAK0C,EAD1C,EAC0CA,YACjD,OAAIM,EACK,0CAAaA,EAAMsB,WAChBrB,EAIR,8BACE,cAAC,EAAD,CACIjD,IAAKA,EACL0C,YAAaA,EACbV,KAAMuC,OAAOpB,KAAKxD,MAAMqC,MACxBO,EAAGA,EACHC,EAAGA,EACHC,MAAOA,EACPtB,KAAe,cAATA,EAAuB,UAAYA,MAX1C,iD,GA7DiBqD,IAAMC,WMgEvBC,E,kDAzFX,WAAY/E,GAA2B,IAAD,8BACpC,cAAMA,IACDoD,MAAQ,CACXE,UAAU,EACV0B,OAAQ,GACRC,cAAe,GACf5B,MAAO,MAN2B,E,qDAUtC,WAAqB,IAAD,OACW,MAAzBG,KAAKxD,MAAMkF,YAGfzB,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACC,GACG,GAAiB,YAAbA,EAAIE,KAAoB,CACxB,IAAImB,EAASrB,EAAII,QACjB,EAAKG,SAAS,CACVZ,UAAU,EACV0B,OAAQA,EACRC,cAAeD,EAAO,UAG1BZ,QAAQC,IAAI,eAAiBC,KAAKC,UAAUZ,OAMpD,SAACN,GACG,EAAKa,SAAS,CACdZ,UAAU,EACVD,e,8BAOV,SAAiB8B,GACf3B,KAAKU,SAAS,CACZe,cAAeE,M,mCAInB,WACE,IAAI9C,EAAOmB,KAAKxD,MAAMkF,WACtB,OACE,8BACI,cAAC,EAAD,CAAmB7C,KAAMA,Q,2BAKjC,WAAiB,IAAD,SACqCmB,KAAKJ,MAAhDC,EADM,EACNA,MAAOC,EADD,EACCA,SAAU0B,EADX,EACWA,OAAQC,EADnB,EACmBA,cACjC,OAAI5B,EACK,0CAAaA,EAAMsB,WAChBrB,EAIR,gCACI,cAAC,EAAD,CAAmBjB,KAAM4C,IACzB,eAACG,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SACfC,SAAU,SAAAC,GAAC,OAAI,EAAKC,iBAAiBD,EAAEE,OAAOC,QADhD,SAECb,EAAOc,KAAI,SAACX,EAAMY,GAAP,OAAa,iCAAiBZ,GAAJY,cATzC,+C,oBAiBX,WACE,OAA6B,MAAzBvC,KAAKxD,MAAMkF,WACN1B,KAAKwC,wBAEPxC,KAAKyC,oB,GArFSpB,IAAMC,W,iBC6ClBoB,E,kDAzCX,WAAYlG,GAAwB,IAAD,8BACjC,cAAMA,IACDoD,MAAQ,CACX+C,UAAY,IAHmB,E,qDAOnC,c,oBAGA,WACkB3C,KAAKJ,MAAM+C,UAE3B,OADA/B,QAAQC,IAAI+B,GACJ,gCACE,cAACnE,EAAA,EAAD,CAAQC,QAAQ,OAAO1B,MAAO,CAAC2B,SAAU,SAAU5B,MAAO,OAAQwB,aAAc,QAASK,UAAQ,EAAjG,yHAIA,wBAGEgE,EAAUN,KAAI,SAACO,EAAUN,GAAX,OACZ,sBAAavF,MAAO,CAACwB,UAAW,QAAhC,UACE,eAACC,EAAA,EAAD,CAAQC,QAAQ,OAAO1B,MAAO,CAAC2B,SAAU,SAAU5B,MAAO,OAAQwB,aAAc,QAASK,UAAQ,EAAjG,UACG2D,EAAE,EADL,KACUM,EAASC,KAEnB,wBACE,eAACC,EAAA,EAAD,CAAWC,YAAU,EAAChG,MAAO,CAACiG,MAAO,QAAShG,QAAS,OACnDiG,eAAgB,SAAUC,WAAY,UAD1C,UAEE,cAACJ,EAAA,EAAUvF,KAAX,yCACA,cAACuF,EAAA,EAAUvF,KAAX,2CARI+E,a,GAxBPlB,IAAMC,W,4BRHxBnD,O,eAAAA,I,sBAAAA,M,SAmDUiF,E,kDAxCb,WAAY5G,GAAe,IAAD,8BACxB,cAAMA,IACDoD,MAAQ,CACXyD,KAAMlF,EAAKmF,SAHW,E,8CAO1B,SAAWD,GACTrD,KAAKU,SAAS,CACZ2C,KAAMA,M,oBAIV,WACE,OACE,sBAAKhF,UAAU,MAAf,UACI,oBAAIrB,MAAO,CAACuG,WAAY,OAAQN,MAAO,UAAWO,WAAY,aAA9D,4BACA,qBAAKnF,UAAU,YAAYrB,MAAO,CAACyG,QAAS,OAAQtG,aAAc,OAAQJ,MAAO,OAAjF,SACE,eAAC2G,EAAA,EAAD,CAAMC,iBAAiB,UAAU3G,MAAO,CAACuB,aAAc,OAAQI,SAAU,QAAzE,UACI,cAACiF,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,mBAA9B,SACE,qBAAKzF,UAAU,MAAf,SACI,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,CAAcqD,YA5BpBqC,EA4ByC,OA3BlD,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAIL,YA+BzC,cAACH,EAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,gBAA3B,SACE,cAAC,EAAD,CAAUtC,OAAQ,eAjCpC,IAAkBuC,I,2BAyChB,gB,GArCgB1C,IAAMC,WSXT+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrE,MAAK,YAAkD,IAA/CsE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3f870095.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Video(props: any) {\n    return <video\n                muted\n                autoPlay\n                playsInline\n                loop\n                src={props.src}\n                height={\"100%\"}\n                width={\"100%\"}\n                style={{\n                    display: \"block\",\n                    boxShadow: \"0px 1px 17px 0px #ffffff38\",\n                    borderRadius: \"5px\"}}>\n            </video>\n}\n\nexport default Video;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface GolgiBodyProps {\n}\n\nconst GolgiBody: FunctionComponent<GolgiBodyProps> = (props: GolgiBodyProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false}>\n        <Carousel.Item>\n        <h1 style={{width: \"60%\", marginLeft: \"20%\", textAlign: \"center\"}}>The packaging warehouse of the cell.</h1>\n        </Carousel.Item>\n        <Carousel.Item>\n        <h3 style={{width: \"60%\", marginLeft: \"20%\", textAlign: \"center\"}}>It helps process and package proteins and lipid molecules, especially proteins destined to be exported from the cell.</h3>\n        </Carousel.Item>\n        <Carousel.Item>\n        <h3 style={{width: \"60%\", marginLeft: \"20%\", textAlign: \"center\"}}>Named after its discoverer, Camillo Golgi, the Golgi body appears as a series of stacked membranes.</h3>\n        </Carousel.Item>\n    </Carousel>\n};\n\nexport default GolgiBody;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface CytosolProps {\n}\n\nconst Cytosol: FunctionComponent<CytosolProps> = (props: CytosolProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        ## The liquid medium contained within a cell.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        The main component of cytosol is water.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        Suspended within the cytosol are various ***organelles*** - explore these to learn more.\n        </ReactMarkdown>\n    </Carousel.Item>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        **Did you know?**\n        </ReactMarkdown>\n        <ReactMarkdown>\n        That's not all though! The cytosol also contains dissolved ions, small molecules, and proteins.\n        </ReactMarkdown>\n    </Carousel.Item>\n</Carousel>\n};\n\nexport default Cytosol;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface CytosolProps {\n}\n\nconst Cytosol: FunctionComponent<CytosolProps> = (props: CytosolProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ## The control centre of the cell.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            The nucleus contains most of the cell's genetic material inside DNA structures known as ***chromosomes***.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            Inside the nucleus, DNA is transcribed into ***messenger RNA*** which leaves the nucleus through\n            small pores.\n            </ReactMarkdown>\n        </Carousel.Item>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            The messenger RNA is ***translated*** elsewhere into proteins, which have important\n            roles to play - for instance, controlling your hair colour!\n            </ReactMarkdown>\n            <ReactMarkdown>\n            The nucleus is also responsible for reproduction (AKA ***cell division***).\n            </ReactMarkdown>\n        </Carousel.Item>\n    </Carousel>\n};\n\nexport default Cytosol;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface MitochondrionProps {\n}\n\nconst Mitochondrion: FunctionComponent<MitochondrionProps> = (props: MitochondrionProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n            <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n                <ReactMarkdown>\n                ## The powerhouse of the cell.\n                </ReactMarkdown>\n                <ReactMarkdown>\n                Mitochondria generate the **chemical energy** to power the cell's biochemical reactions.\n                </ReactMarkdown>\n                <ReactMarkdown>\n                This energy is stored in a small molecule called ***ATP: adenosine triphosphate***.\n                </ReactMarkdown>\n            </Carousel.Item>\n            <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n                <ReactMarkdown>\n                **Did you know?**\n                </ReactMarkdown>\n                <ReactMarkdown>\n                Mitochondria contain their own DNA, in the form of small, circular chromosomes. These are only inherited from the mother!\n                </ReactMarkdown>\n            </Carousel.Item>\n        </Carousel>\n};\n\nexport default Mitochondrion;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface LysosomeProps {\n}\n\nconst Lysosome: FunctionComponent<LysosomeProps> = (props: LysosomeProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ## The lord of destruction of the cell.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            Lysosomes contain ***digestive enzymes*** which break down excess or worn-out cell parts.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            They are also involved in a rather morbid process called ***apoptosis***. Read ahead to find out what this is.\n            </ReactMarkdown>\n        </Carousel.Item>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ***Apoptosis***: Programmed cell death.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            If the cell is damaged beyond repair, lysosomes can help it self-destruct in a process called apoptosis, or programmed cell death.\n            </ReactMarkdown>\n        </Carousel.Item>\n    </Carousel>\n};\n\nexport default Lysosome;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\nimport GolgiBody from './GolgiBody';\nimport Cytosol from './Cytosol';\nimport Nucleus from './Nucleus';\nimport Mitochondrion from './Mitochondrion';\nimport Lysosome from './Lysosome';\n\ninterface LocationProps {\n    x: number,\n    y: number,\n    theta: number,\n    zone: string,\n    src: string,\n    lastFetched: string | null,\n    name: string\n}\n\nfunction getOrganelleCarousel(zone: string) {\n    switch (zone) {\n        case \"golgiBody\":\n            return <GolgiBody/>;\n        case \"nucleus\":\n            return <Nucleus/>;\n        case \"lysosome\":\n            return <Lysosome/>;\n        case \"mitochondrion\":\n            return <Mitochondrion/>;\n        case \"cytosol\":\n        case \"undefined\":\n            return <Cytosol/>;\n        default:\n            throw new Error(\"Undefined behaviour for zone: \" + zone);\n    }\n}\n\nconst Location: FunctionComponent<LocationProps> = (props: LocationProps): any => {\n    /* function body */\n    return <div className=\"row\">\n        <div className=\"col-lg\">\n            <Figure style={{marginBottom: \"-3px\", marginTop: \"-5px\"}}>\n                <Video src={props.src}></Video>\n            </Figure>\n            <Button variant=\"dark mt-2\" style={{ fontSize: \"1.5rem\", width: \"100%\"}} disabled>\n                {props.name}\n            </Button>\n            <Button variant=\"dark mt-2\" style={{ fontSize: \"1rem\", width: \"100%\", textAlign: \"left\" }} disabled>\n                {getOrganelleCarousel(props.zone)}\n            </Button>\n            <Button variant=\"dark mt-2\" style={{ fontSize: \"1rem\", width: \"100%\" }} disabled>\n                <Spinner animation=\"grow\" variant=\"light\" size=\"sm\" style={{ marginRight: \"3%\" }} />\n                Location: (x={Math.round(props.x)}, y={Math.round(props.y)}, theta={Math.round(props.theta)}, zone={props.zone})\n            </Button>\n            <Button variant=\"dark mt-2\" style={{ fontSize: \"1rem\", width: \"100%\" }} disabled>Last updated at {props.lastFetched === null ? \"\" : props.lastFetched}</Button>\n        </div>\n    </div>\n};\n\nexport default Location;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport RobotDisplay from './components/RobotDisplay';\nimport Activity from './components/Activity';\nimport {Tab, Tabs} from 'react-bootstrap';\n\ninterface State {\n  mode: Mode,\n}\n\ninterface Props {\n}\n\nenum Mode {\n  Test,\n  Explore,\n}\n\nfunction getQuery(query : string) {\n  return new URLSearchParams(window.location.search).get(query);\n}\n\nclass App extends React.Component<Props,State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      mode: Mode.Explore\n    };\n  }\n\n  changeMode(mode: Mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <h2 style={{paddingTop: \"30px\", color: \"#b9b9b9\", fontFamily: \"helvetica\"}}>Haptic Cellulo</h2>\n          <div className=\"container\" style={{padding: \"30px\", borderRadius: \"10px\", width: \"40%\"}}>\n            <Tabs defaultActiveKey=\"explore\" style={{marginBottom: \"20px\", fontSize: \"1rem\"}}>\n                <Tab eventKey=\"explore\" title=\"Explore Cell Map\">\n                  <div className=\"row\">\n                      <div className=\"col\">\n                        <RobotDisplay queryRobot={getQuery('name')}></RobotDisplay>\n                      </div>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"quiz\" title=\"Complete Quiz\">\n                  <Activity robots={[]}></Activity>\n                </Tab>\n              </Tabs>\n          </div>\n      </div>\n    );\n  }\n\n  renderContent() {\n    return  \n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Alert, Spinner, Badge} from 'react-bootstrap';\nimport Span from 'react-bootstrap';\nimport Location from './UI/Location';\nimport nucleusGraphic from '../assets/nucleus.mp4';\nimport mitochondrionGraphic from '../assets/mitochondrion.mp4';\nimport golgiBodyGraphic from '../assets/golgi_body.mp4';\nimport lysosomeGraphic from '../assets/lysosome.mp4';\nimport undefinedGraphic from '../assets/cytosol.mp4';\nimport Captions from '../assets/captions.json';\n\ninterface OrganelleData {\n  graphic: string\n}\n\ninterface OrganelleStore {\n  [index: string]: OrganelleData;\n}\n\nlet organelles = {\n  \"nucleus\" : {graphic: nucleusGraphic},\n  \"mitochondrion\": {graphic: mitochondrionGraphic},\n  \"golgiBody\": {graphic: golgiBodyGraphic},\n  \"lysosome\": {graphic: lysosomeGraphic},\n  \"undefined\": {graphic: undefinedGraphic}\n} as OrganelleStore;\n\ninterface LocationComponentState {\n  error: any,\n  isLoaded: boolean,\n  x: number,\n  y: number,\n  theta: number,\n  zone: string,\n  src: string,\n  lastFetched: string\n}\n\ninterface LocationComponentProps {\n  name: string | null\n}\n\nclass LocationComponent extends React.Component<LocationComponentProps, LocationComponentState> {\n\n    intervalId: any = 0;\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: 0,\n        y: 0,\n        theta: 0,\n        zone: \"undefined\",\n        src: \"\",\n        lastFetched: \"\"\n      };\n    }\n\n  async fetchPose() {\n        const name = this.props.name;\n        fetch(`https://cellulo-live.herokuapp.com/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let pose = res.content;\n                    var date = new Date();\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta,\n                        zone: pose.zone,\n                        lastFetched: date.toLocaleTimeString('en-US'),\n                        src: organelles[pose.zone].graphic,\n                    });\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error: error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.fetchPose.bind(this), 500);\n        this.fetchPose();\n    }\n\n    render() {\n      const { error, isLoaded, x, y, theta, zone, src, lastFetched } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <Location \n                src={src} \n                lastFetched={lastFetched}\n                name={String(this.props.name)}\n                x={x}\n                y={y}\n                theta={theta}\n                zone={zone === \"undefined\" ? \"cytosol\" : zone}>\n            </Location>\n          </div>\n        );\n      }\n    }\n  }\nexport default LocationComponent;","export default __webpack_public_path__ + \"static/media/nucleus.ddd8d8e8.mp4\";","export default __webpack_public_path__ + \"static/media/mitochondrion.e87f2a95.mp4\";","export default __webpack_public_path__ + \"static/media/golgi_body.48b36d1d.mp4\";","export default __webpack_public_path__ + \"static/media/lysosome.6aab8551.mp4\";","export default __webpack_public_path__ + \"static/media/cytosol.5d6e8b37.mp4\";","import React from 'react';\nimport {Form, Badge, Button} from 'react-bootstrap';\nimport LocationComponent from './LocationComponent';\n\ninterface RobotDisplayProps {\n  queryRobot: string | null,\n}\n\ninterface RobotDisplayState {\n  isLoaded: boolean,\n  robots: Array<string>,\n  selectedRobot: string,\n  error: any,\n}\n\nclass RobotDisplay extends React.Component<RobotDisplayProps, RobotDisplayState> {\n\n    constructor(props: RobotDisplayProps) {\n      super(props);\n      this.state = {\n        isLoaded: false,\n        robots: [],\n        selectedRobot: \"\",\n        error: null\n      };\n    }\n\n    componentDidMount() {\n      if (this.props.queryRobot != null) {\n        return;\n      }\n      fetch(`https://cellulo-live.herokuapp.com/robots/`)\n          .then(res => res.json())\n          .then(\n          (res) => {\n              if (res.type === 'success') {\n                  let robots = res.content;\n                  this.setState({\n                      isLoaded: true,\n                      robots: robots,\n                      selectedRobot: robots[0]\n                  });                    \n              } else {\n                  console.log(\"Non-success:\" + JSON.stringify(res));\n              }\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              this.setState({\n              isLoaded: true,\n              error\n              });\n          }\n          )\n        \n    }\n\n    setSelectedRobot(robot: string) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n\n    renderFromQueryString() {\n      let name = this.props.queryRobot;\n      return (\n        <div>\n            <LocationComponent name={name}></LocationComponent> \n        </div>\n      );\n    }\n\n    renderFromApi() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n              <LocationComponent name={selectedRobot}></LocationComponent> \n              <Form.Group>\n                  <Form.Label>Tracking player:</Form.Label>\n                  <Form.Control as=\"select\"\n                    onChange={e => this.setSelectedRobot(e.target.value)}>\n                  {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                  </Form.Control>\n              </Form.Group>\n          </div>\n        );      \n      }\n    }\n  \n    render() {\n      if (this.props.queryRobot != null) {\n        return this.renderFromQueryString();\n      }\n      return this.renderFromApi();\n    }\n  }\n\n\n\nexport default RobotDisplay;","import React from 'react';\nimport {Form, Badge, Button, ListGroup} from 'react-bootstrap';\nimport Questions from '../assets/question_sheet.json';\n\ninterface ActivityProps {\n  robots: Array<string>\n}\n\ninterface Response {\n  number: Number,\n  selection: Number\n}\n\ninterface ActivityState {\n  responses: Array<Response>\n}\n\nclass Activity extends React.Component<ActivityProps, ActivityState> {\n\n    constructor(props : ActivityProps) {\n      super(props);\n      this.state = {\n        responses : []\n      };\n    }\n\n    componentDidMount() {\n    }\n  \n    render() {\n      let responses = this.state.responses;\n      console.log(Questions);\n      return  <div>\n                <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                  For each question, place your robot to the organelle on the map\n                    that you consider to be the correct answer.\n                </Button>                \n                <div>\n                </div>\n                {\n                  Questions.map((question, i) => \n                    <div key={i} style={{marginTop: \"10px\"}}>\n                      <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                        {i+1}. {question.Q}\n                      </Button>\n                      <div></div>\n                        <ListGroup horizontal style={{color: \"black\", display: \"flex\", \n                            justifyContent: \"center\", alignItems: \"center\"}}>\n                          <ListGroup.Item>Robot A says: Mitochondria</ListGroup.Item>\n                          <ListGroup.Item>Robot B says: Ribosomes</ListGroup.Item>\n                        </ListGroup>\n                    </div>\n                  )\n                }\n              </div>\n    }\n  }\n\n\n\nexport default Activity;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}