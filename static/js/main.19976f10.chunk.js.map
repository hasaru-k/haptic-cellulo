{"version":3,"sources":["components/UI/Video.tsx","App.tsx","components/UI/Location.tsx","components/LocationComponent.tsx","assets/nucleus.mp4","assets/mitochondrion.mp4","assets/golgi_body.mp4","assets/cytosol.mp4","components/RobotDisplay.tsx","components/Activity.tsx","reportWebVitals.js","index.js"],"names":["Video","Mode","props","muted","autoPlay","playsInline","loop","src","height","width","style","display","boxShadow","borderRadius","marginLeft","Location","Figure","Caption","marginTop","textAlign","color","fontSize","padding","caption","Button","variant","disabled","Spinner","animation","size","marginRight","Math","round","x","y","theta","zone","lastFetched","organelles","graphic","LocationComponent","intervalId","state","error","isLoaded","a","name","this","fetch","then","res","json","type","pose","content","date","Date","setState","toLocaleTimeString","console","log","JSON","stringify","setInterval","fetchPose","bind","message","String","React","Component","RobotDisplay","robots","selectedRobot","queryRobot","robot","marginBottom","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","renderFromQueryString","renderFromApi","Activity","responses","Questions","question","Q","ListGroup","horizontal","justifyContent","alignItems","Item","getQuery","query","URLSearchParams","window","location","search","get","App","mode","Explore","className","backgroundColor","Tabs","defaultActiveKey","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6tBAmBeA,ICLVC,EDKUD,EAjBf,SAAeE,GACX,OAAO,uBACKC,OAAK,EACLC,UAAQ,EACRC,aAAW,EACXC,MAAI,EACJC,IAAKL,EAAMK,IACXC,OAAQ,MACRC,MAAO,MACPC,MAAO,CACHC,QAAS,QACTC,UAAW,6BACXC,aAAc,MACdC,WAAY,UEmBjBC,EAjBoC,SAACb,GAEhD,OAAO,gCACK,eAACc,EAAA,EAAD,WACI,cAAC,EAAD,CAAOT,IAAKL,EAAMK,MAClB,cAACS,EAAA,EAAOC,QAAR,CAAgBP,MAAO,CAACQ,UAAW,OAAQC,UAAW,OAAQC,MAAO,UAAWC,SAAU,MAAOC,QAAS,OAAQd,OAAQ,SAA1H,SACCN,EAAMqB,aAGX,eAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOf,MAAO,CAACW,SAAU,OAAQZ,MAAO,QAASiB,UAAQ,EAAzE,UACI,cAACC,EAAA,EAAD,CAASC,UAAU,OAAOH,QAAQ,QAAQI,KAAK,KAAKnB,MAAO,CAACoB,YAAa,QAD7E,gBAEkBC,KAAKC,MAAM9B,EAAM+B,GAFnC,OAE2CF,KAAKC,MAAM9B,EAAMgC,GAF5D,WAEwEH,KAAKC,MAAM9B,EAAMiC,OAFzF,UAEwGjC,EAAMkC,KAF9G,OAIA,eAACZ,EAAA,EAAD,CAAQC,QAAQ,OAAOf,MAAO,CAACW,SAAU,OAAQZ,MAAO,QAASiB,UAAQ,EAAzE,6BAAiH,OAAtBxB,EAAMmC,YAAuB,GAAKnC,EAAMmC,mBCN/IC,EAAa,CACf,QAVgB,CAACC,QCfJ,IAA0B,oCDeGhB,QAAS,uTAWnD,cAVsB,CAACgB,QEhBV,IAA0B,0CFgBehB,QAAS,qcAW/D,UAVkB,CAACgB,QGjBN,IAA0B,uCHiBOhB,QAAS,uUAWvD,UAVkB,CAACgB,QIlBN,IAA0B,oCJkBOhB,QAAS,yOA+G1CiB,E,kDA/EX,WAAYtC,GAAa,IAAD,8BACtB,cAAMA,IAFRuC,WAAkB,EAGhB,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVX,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,KAAM,YACN7B,IAAK,GACLgB,QAAS,sBACTc,YAAa,IAXO,E,oFAe1B,mCAAAQ,EAAA,sDACYC,EAAOC,KAAK7C,MAAM4C,KACxBE,MAAM,gDAAD,OAAiDF,IACjDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACC,GACG,GAAiB,YAAbA,EAAIE,KAAoB,CACxB,IAAIC,EAAOH,EAAII,QACXC,EAAO,IAAIC,KACf,EAAKC,SAAS,CACVb,UAAU,EACVX,EAAGoB,EAAKpB,EACRC,EAAGmB,EAAKnB,EACRC,MAAOkB,EAAKlB,MACZC,KAAMiB,EAAKjB,KACXC,YAAakB,EAAKG,mBAAmB,SACrCnD,IAAK+B,EAAWe,EAAKjB,MAAMG,QAC3BhB,QAASe,EAAWe,EAAKjB,MAAMb,eAGnCoC,QAAQC,IAAI,eAAiBC,KAAKC,UAAUZ,OAMpD,SAACP,GACG,EAAKc,SAAS,CACZb,UAAU,EACVD,MAAOA,OA7BvB,gD,qFAmCE,WACII,KAAKN,WAAasB,YAAYhB,KAAKiB,UAAUC,KAAKlB,MAAO,KACzDA,KAAKiB,c,oBAGT,WAAU,IAAD,EACmEjB,KAAKL,MAAvEC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUX,EADlB,EACkBA,EAAGC,EADrB,EACqBA,EAAGC,EADxB,EACwBA,MAAOC,EAD/B,EAC+BA,KAAM7B,EADrC,EACqCA,IAAKgB,EAD1C,EAC0CA,QAASc,EADnD,EACmDA,YAC1D,OAAIM,EACK,0CAAaA,EAAMuB,WAChBtB,EAIR,8BACE,cAAC,EAAD,CACIrC,IAAKA,EACLgB,QAASA,EACTc,YAAaA,EACbS,KAAMqB,OAAOpB,KAAK7C,MAAM4C,MACxBb,EAAGA,EACHC,EAAGA,EACHC,MAAOA,EACPC,KAAe,cAATA,EAAuB,UAAYA,MAZ1C,iD,GA/DiBgC,IAAMC,WK8DvBC,E,kDA5FX,WAAYpE,GAA2B,IAAD,8BACpC,cAAMA,IACDwC,MAAQ,CACXE,UAAU,EACV2B,OAAQ,GACRC,cAAe,GACf7B,MAAO,MAN2B,E,qDAUtC,WAAqB,IAAD,OACW,MAAzBI,KAAK7C,MAAMuE,YAGfzB,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACC,GACG,GAAiB,YAAbA,EAAIE,KAAoB,CACxB,IAAImB,EAASrB,EAAII,QACjB,EAAKG,SAAS,CACVb,UAAU,EACV2B,OAAQA,EACRC,cAAeD,EAAO,UAG1BZ,QAAQC,IAAI,eAAiBC,KAAKC,UAAUZ,OAMpD,SAACP,GACG,EAAKc,SAAS,CACdb,UAAU,EACVD,e,8BAOV,SAAiB+B,GACf3B,KAAKU,SAAS,CACZe,cAAeE,M,mCAInB,WACE,IAAI5B,EAAOC,KAAK7C,MAAMuE,WACtB,OACE,gCACI,eAACjD,EAAA,EAAD,CAAQC,QAAQ,OAAOf,MAAO,CAACW,SAAU,SAAUZ,MAAO,OAAQkE,aAAc,QAASjD,UAAQ,EAAjG,oBACUoB,KAEV,cAAC,EAAD,CAAmBA,KAAMA,S,2BAKjC,WAAiB,IAAD,SACqCC,KAAKL,MAAhDC,EADM,EACNA,MAAOC,EADD,EACCA,SAAU2B,EADX,EACWA,OAAQC,EADnB,EACmBA,cACjC,OAAI7B,EACK,0CAAaA,EAAMuB,WAChBtB,EAIR,gCACI,cAAC,EAAD,CAAmBE,KAAM0B,IACzB,eAACI,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SACfC,SAAU,SAAAC,GAAC,OAAI,EAAKC,iBAAiBD,EAAEE,OAAOC,QADhD,SAECd,EAAOe,KAAI,SAACZ,EAAMa,GAAP,OAAa,iCAAiBb,GAAJa,cATzC,+C,oBAiBX,WACE,OAA6B,MAAzBxC,KAAK7C,MAAMuE,WACN1B,KAAKyC,wBAEPzC,KAAK0C,oB,GAxFSrB,IAAMC,W,gBC6ClBqB,E,kDAzCX,WAAYxF,GAAwB,IAAD,8BACjC,cAAMA,IACDwC,MAAQ,CACXiD,UAAY,IAHmB,E,qDAOnC,c,oBAGA,WACkB5C,KAAKL,MAAMiD,UAE3B,OADAhC,QAAQC,IAAIgC,GACJ,gCACE,cAACpE,EAAA,EAAD,CAAQC,QAAQ,OAAOf,MAAO,CAACW,SAAU,SAAUZ,MAAO,OAAQkE,aAAc,QAASjD,UAAQ,EAAjG,yHAIA,wBAGEkE,EAAUN,KAAI,SAACO,EAAUN,GAAX,OACZ,sBAAa7E,MAAO,CAACQ,UAAW,QAAhC,UACE,eAACM,EAAA,EAAD,CAAQC,QAAQ,OAAOf,MAAO,CAACW,SAAU,SAAUZ,MAAO,OAAQkE,aAAc,QAASjD,UAAQ,EAAjG,UACG6D,EAAE,EADL,KACUM,EAASC,KAEnB,wBACE,eAACC,EAAA,EAAD,CAAWC,YAAU,EAACtF,MAAO,CAACU,MAAO,QAAST,QAAS,OACnDsF,eAAgB,SAAUC,WAAY,UAD1C,UAEE,cAACH,EAAA,EAAUI,KAAX,yCACA,cAACJ,EAAA,EAAUI,KAAX,2CARIZ,a,GAxBPnB,IAAMC,W,gBRE7B,SAAS+B,EAASC,GAChB,OAAO,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAIL,I,SANpDpG,O,eAAAA,I,sBAAAA,M,SAsDU0G,E,kDA3Cb,WAAYzG,GAAe,IAAD,8BACxB,cAAMA,IACDwC,MAAQ,CACXkE,KAAM3G,EAAK4G,SAHW,E,8CAO1B,SAAWD,GACT7D,KAAKU,SAAS,CACZmD,KAAMA,M,oBAIV,WACE,OACE,sBAAKE,UAAU,MAAf,UACI,sBACA,qBAAKA,UAAU,YAAYpG,MAAO,CAACqG,gBAAiB,UAAWzF,QAAS,OAAQT,aAAc,OAA9F,SACE,eAACmG,EAAA,EAAD,CAAMC,iBAAiB,UAAUvG,MAAO,CAACiE,aAAc,OAAQtD,SAAU,QAAzE,UACI,cAAC6F,EAAA,EAAD,CAAKC,SAAS,UAAUC,MAAM,mBAA9B,SACE,sBAAKN,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,CAAcrC,WAAY2B,EAAS,YAErC,qBAAKU,UAAU,MAAf,SACE,cAAC,EAAD,CAAcrC,WAAY2B,EAAS,kBAI3C,cAACc,EAAA,EAAD,CAAKC,SAAS,OAAOC,MAAM,gBAA3B,SACE,cAAC,EAAD,CAAU7C,OAAQ,iB,2BAQlC,gB,GAxCgBH,IAAMC,WSXTgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.19976f10.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Video(props: any) {\n    return <video\n                muted\n                autoPlay\n                playsInline\n                loop\n                src={props.src}\n                height={\"60%\"}\n                width={\"80%\"}\n                style={{\n                    display: \"block\",\n                    boxShadow: \"0px 1px 17px 0px #ffffff38\",\n                    borderRadius: \"5px\",\n                    marginLeft: \"10%\"}}>\n            </video>\n}\n\nexport default Video;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport RobotDisplay from './components/RobotDisplay';\nimport Activity from './components/Activity';\nimport {Tab, Tabs} from 'react-bootstrap';\n\ninterface State {\n  mode: Mode,\n}\n\ninterface Props {\n}\n\nenum Mode {\n  Test,\n  Explore,\n}\n\nfunction getQuery(query : string) {\n  return new URLSearchParams(window.location.search).get(query);\n}\n\nclass App extends React.Component<Props,State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      mode: Mode.Explore\n    };\n  }\n\n  changeMode(mode: Mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <p></p>\n          <div className=\"container\" style={{backgroundColor: \"#cccccc\", padding: \"20px\", borderRadius: \"5px\"}}>\n            <Tabs defaultActiveKey=\"explore\" style={{marginBottom: \"20px\", fontSize: \"1rem\"}}>\n                <Tab eventKey=\"explore\" title=\"Explore Cell Map\">\n                  <div className=\"row\">\n                      <div className=\"col\">\n                        <RobotDisplay queryRobot={getQuery('left')}></RobotDisplay>\n                      </div>\n                      <div className=\"col\">\n                        <RobotDisplay queryRobot={getQuery('right')}></RobotDisplay>\n                      </div>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"quiz\" title=\"Complete Quiz\">\n                  <Activity robots={[]}></Activity>\n                </Tab>\n              </Tabs>\n          </div>\n      </div>\n    );\n  }\n\n  renderContent() {\n    return  \n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Figure, Spinner, Badge, Alert, Button} from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\n\ninterface LocationProps {\n    x: number,\n    y: number,\n    theta: number,\n    zone: string,\n    src: string,\n    caption: string,\n    lastFetched: string | null,\n    name: string\n}\n\nconst Location: FunctionComponent<LocationProps> = (props: LocationProps): any => { \n    /* function body */ \n    return <div>\n                <Figure>\n                    <Video src={props.src}></Video>\n                    <Figure.Caption style={{marginTop: \"10px\", textAlign: \"left\", color: \"#383838\", fontSize: \"70%\", padding: \"10px\", height: \"16rem\"}}>\n                    {props.caption}\n                    </Figure.Caption>\n                </Figure>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>\n                    <Spinner animation=\"grow\" variant=\"light\" size=\"sm\" style={{marginRight: \"3%\"}} />\n                    Location: (x={Math.round(props.x)}, y={Math.round(props.y)}, theta={Math.round(props.theta)}, zone={props.zone})\n                </Button>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>Last updated at {props.lastFetched === null ? \"\" : props.lastFetched}</Button>\n            </div>\n};\n\nexport default Location;","import React from 'react';\nimport {Alert, Spinner, Badge} from 'react-bootstrap';\nimport Span from 'react-bootstrap';\nimport Location from './UI/Location';\nimport nucleusGraphic from '../assets/nucleus.mp4';\nimport mitochondrionGraphic from '../assets/mitochondrion.mp4';\nimport golgiBodyGraphic from '../assets/golgi_body.mp4';\nimport undefinedGraphic from '../assets/cytosol.mp4';\n\ninterface OrganelleData {\n  graphic: string,\n  caption: string\n}\n\n// Todo: migrate into JSON\nlet nucleusData = {graphic: nucleusGraphic, caption: \"The knowledge centre of the cell. A nucleus is a membrane-bound organelle that contains the cell's chromosomes. Pores in the nuclear membrane allow for the passage of RNA molecules in and out of the nucleus. The cell nucleus contains all of the cell's genome, except for a small amount of mitochondrial DNA.\"} as OrganelleData;\nlet mitochondrionData = {graphic: mitochondrionGraphic, caption: \"The powerhouse of the cell. Mitochondria are membrane-bound cell organelles (mitochondrion, singular) that generate most of the chemical energy needed to power the cell's biochemical reactions. Chemical energy produced by the mitochondria is stored in a small molecule called adenosine triphosphate (ATP). Mitochondria contain their own small chromosomes. Generally, mitochondria, and therefore mitochondrial DNA, are inherited only from the mother.\"} as OrganelleData;\nlet golgiBodyData = {graphic: golgiBodyGraphic, caption: \"The packaging warehouse of the cell. A Golgi body, also known as a Golgi apparatus, is a cell organelle that helps process and package proteins and lipid molecules, especially proteins destined to be exported from the cell. Named after its discoverer, Camillo Golgi, the Golgi body appears as a series of stacked membranes.\"} as OrganelleData;\nlet undefinedData = {graphic: undefinedGraphic, caption: \"The cytosol is the liquid medium contained within a cell. The main component of cytosol is water. It also contains dissolved ions, small molecules, and proteins. Various organelles and particles are suspended inside the cytosol.\"} as OrganelleData;\n\ninterface OrganelleStore {\n  [index: string]: OrganelleData;\n}\n\nlet organelles = {\n  \"nucleus\" : nucleusData,\n  \"mitochondrion\": mitochondrionData,\n  \"golgiBody\": golgiBodyData,\n  \"undefined\": undefinedData\n} as OrganelleStore;\n\ninterface LocationComponentState {\n  error: any,\n  isLoaded: boolean,\n  x: number,\n  y: number,\n  theta: number,\n  zone: string,\n  src: string,\n  caption: string,\n  lastFetched: string\n}\n\ninterface LocationComponentProps {\n  name: string | null\n}\n\nclass LocationComponent extends React.Component<LocationComponentProps, LocationComponentState> {\n\n    intervalId: any = 0;\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: 0,\n        y: 0,\n        theta: 0,\n        zone: \"undefined\",\n        src: \"\",\n        caption: \"Location: undefined\",\n        lastFetched: \"\"\n      };\n    }\n\n  async fetchPose() {\n        const name = this.props.name;\n        fetch(`https://cellulo-live.herokuapp.com/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let pose = res.content;\n                    var date = new Date();\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta,\n                        zone: pose.zone,\n                        lastFetched: date.toLocaleTimeString('en-US'),\n                        src: organelles[pose.zone].graphic,\n                        caption: organelles[pose.zone].caption\n                    });\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error: error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.fetchPose.bind(this), 500);\n        this.fetchPose();\n    }\n\n    render() {\n      const { error, isLoaded, x, y, theta, zone, src, caption, lastFetched } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <Location \n                src={src} \n                caption={caption} \n                lastFetched={lastFetched}\n                name={String(this.props.name)}\n                x={x}\n                y={y}\n                theta={theta}\n                zone={zone === \"undefined\" ? \"cytosol\" : zone}>\n            </Location>\n          </div>\n        );\n      }\n    }\n  }\nexport default LocationComponent;","export default __webpack_public_path__ + \"static/media/nucleus.4a8c0d4e.mp4\";","export default __webpack_public_path__ + \"static/media/mitochondrion.e87f2a95.mp4\";","export default __webpack_public_path__ + \"static/media/golgi_body.810b2da0.mp4\";","export default __webpack_public_path__ + \"static/media/cytosol.a6c2e65a.mp4\";","import React from 'react';\nimport {Form, Badge, Button} from 'react-bootstrap';\nimport LocationComponent from './LocationComponent';\n\ninterface RobotDisplayProps {\n  queryRobot: string | null,\n}\n\ninterface RobotDisplayState {\n  isLoaded: boolean,\n  robots: Array<string>,\n  selectedRobot: string,\n  error: any,\n}\n\nclass RobotDisplay extends React.Component<RobotDisplayProps, RobotDisplayState> {\n\n    constructor(props: RobotDisplayProps) {\n      super(props);\n      this.state = {\n        isLoaded: false,\n        robots: [],\n        selectedRobot: \"\",\n        error: null\n      };\n    }\n\n    componentDidMount() {\n      if (this.props.queryRobot != null) {\n        return;\n      }\n      fetch(`https://cellulo-live.herokuapp.com/robots/`)\n          .then(res => res.json())\n          .then(\n          (res) => {\n              if (res.type === 'success') {\n                  let robots = res.content;\n                  this.setState({\n                      isLoaded: true,\n                      robots: robots,\n                      selectedRobot: robots[0]\n                  });                    \n              } else {\n                  console.log(\"Non-success:\" + JSON.stringify(res));\n              }\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              this.setState({\n              isLoaded: true,\n              error\n              });\n          }\n          )\n        \n    }\n\n    setSelectedRobot(robot: string) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n\n    renderFromQueryString() {\n      let name = this.props.queryRobot;\n      return (\n        <div>\n            <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n              Player {name}\n            </Button>\n            <LocationComponent name={name}></LocationComponent> \n        </div>\n      );\n    }\n\n    renderFromApi() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n              <LocationComponent name={selectedRobot}></LocationComponent> \n              <Form.Group>\n                  <Form.Label>Tracking player:</Form.Label>\n                  <Form.Control as=\"select\"\n                    onChange={e => this.setSelectedRobot(e.target.value)}>\n                  {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                  </Form.Control>\n              </Form.Group>\n          </div>\n        );      \n      }\n    }\n  \n    render() {\n      if (this.props.queryRobot != null) {\n        return this.renderFromQueryString();\n      }\n      return this.renderFromApi();\n    }\n  }\n\n\n\nexport default RobotDisplay;","import React from 'react';\nimport {Form, Badge, Button, ListGroup} from 'react-bootstrap';\nimport Questions from '../assets/question_sheet.json';\n\ninterface ActivityProps {\n  robots: Array<string>\n}\n\ninterface Response {\n  number: Number,\n  selection: Number\n}\n\ninterface ActivityState {\n  responses: Array<Response>\n}\n\nclass Activity extends React.Component<ActivityProps, ActivityState> {\n\n    constructor(props : ActivityProps) {\n      super(props);\n      this.state = {\n        responses : []\n      };\n    }\n\n    componentDidMount() {\n    }\n  \n    render() {\n      let responses = this.state.responses;\n      console.log(Questions);\n      return  <div>\n                <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                  For each question, place your robot to the organelle on the map\n                    that you consider to be the correct answer.\n                </Button>                \n                <div>\n                </div>\n                {\n                  Questions.map((question, i) => \n                    <div key={i} style={{marginTop: \"10px\"}}>\n                      <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                        {i+1}. {question.Q}\n                      </Button>\n                      <div></div>\n                        <ListGroup horizontal style={{color: \"black\", display: \"flex\", \n                            justifyContent: \"center\", alignItems: \"center\"}}>\n                          <ListGroup.Item>Robot A says: Mitochondria</ListGroup.Item>\n                          <ListGroup.Item>Robot B says: Ribosomes</ListGroup.Item>\n                        </ListGroup>\n                    </div>\n                  )\n                }\n              </div>\n    }\n  }\n\n\n\nexport default Activity;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}