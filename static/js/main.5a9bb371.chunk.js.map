{"version":3,"sources":["components/RobotMap.jsx","components/RobotDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["RobotMap","props","state","error","isLoaded","x","y","theta","name","this","fetch","then","res","json","type","console","log","pose","content","setState","JSON","stringify","fetchPose","prevProps","message","React","Component","RobotDisplay","robots","selectedRobot","robot","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","App","className","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a9bb371.chunk.js","sourcesContent":["import React from 'react';\n\nclass RobotMap extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: \"\",\n        y: \"\",\n        theta: \"\"\n      };\n    }\n\n    fetchPose() {\n        const name = this.props.name;\n        fetch(`/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    console.log(res);\n                    let pose = res.content;\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta\n                    });\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.fetchPose();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.name !== this.props.name) {\n          this.fetchPose();\n        }\n    }\n  \n    render() {\n      const { error, isLoaded, x, y, theta } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n            <div>Robot {this.props.name} is at (x={x},y={y},theta={theta})</div>\n        );\n      }\n    }\n  }\nexport default RobotMap;","import React from 'react';\nimport {Form} from 'react-bootstrap';\nimport RobotMap from './RobotMap';\n\nclass RobotDisplay extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        robots: [],\n        selectedRobot: \"\"\n      };\n    }\n\n    componentDidMount() {\n        fetch(`/robots/`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let robots = res.content;\n                    this.setState({\n                        isLoaded: true,\n                        robots: robots,\n                        selectedRobot: robots[0]\n                    });                    \n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n            )\n    }\n\n    setSelectedRobot(robot) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n  \n    render() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n            <div>\n                <RobotMap name={selectedRobot}></RobotMap> \n                <Form.Group>\n                    <Form.Label>Tracking robot:</Form.Label>\n                    <Form.Control as=\"select\"\n                      onChange={e => this.setSelectedRobot(e.target.value)}>\n                    {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n      }\n    }\n  }\nexport default RobotDisplay;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport RobotDisplay from './components/RobotDisplay';\n\nlet url = \"http://cellulo-live.herokuapp.com/pose\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p></p>\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"col-sm\">\n              <RobotDisplay></RobotDisplay>\n            </div>\n            <div class=\"col-sm\">\n              <RobotDisplay></RobotDisplay>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}