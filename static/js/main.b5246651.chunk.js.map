{"version":3,"sources":["components/Activity.tsx","components/UI/Video.tsx","components/UI/GolgiBody.tsx","components/UI/Cytosol.tsx","components/UI/Nucleus.tsx","components/UI/Mitochondrion.tsx","components/UI/Lysosome.tsx","components/UI/Location.tsx","MainDisplay.tsx","assets/nucleus.mp4","assets/mitochondrion.mp4","assets/golgi_body.mp4","assets/lysosome.mp4","assets/cytosol.mp4","components/LocationComponent.tsx","components/UI/Checklist.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["SendingState","Activity","props","submitResults","player","partner","answers","setState","sendingState","IN_FLIGHT","fetch","join","method","then","res","json","console","log","error","Error","SENT","setChecked","i","target","state","playerZone","zone","answer","get","undefined","isChecked","checked","blur","renderTooltip","Popover","body","style","padding","width","Map","Questions","forEach","question","set","UNSENT","this","answerList","Array","from","values","map","val","gamePlayers","inAccordance","allAnswered","every","paddingLeft","paddingRight","paddingBottom","Button","variant","fontSize","marginBottom","disabled","OverlayTrigger","placement","trigger","delay","show","hide","overlay","marginTop","textAlign","Q","ToggleButtonGroup","type","alignItems","animation","ToggleButton","value","length","pointerEvents","marginRight","A","j","name","id","onChange","e","currentTarget","onClick","React","Component","Video","muted","autoPlay","playsInline","loop","src","height","boxShadow","borderRadius","GolgiBody","Carousel","indicators","touch","interval","Item","marginLeft","Cytosol","Mitochondrion","Lysosome","getOrganelleCarousel","Nucleus","Mode","Location","Figure","Spinner","size","lastFetched","organelles","graphic","nucleusGraphic","mitochondrionGraphic","golgiBodyGraphic","lysosomeGraphic","undefinedGraphic","LocationComponent","x","y","theta","points","Checklist","Form","color","backgroundColor","fontFamily","point","className","Check","label","MainDisplay","startQuiz","showModal","startedQuiz","keepExploring","key","mode","Explore","desiredKey","paddingTop","Tabs","activeKey","onSelect","k","setKey","Tab","eventKey","title","margin","Modal","backdrop","keyboard","Header","closeButton","Title","Body","Footer","getQuery","query","required","result","URLSearchParams","window","location","search","App","intervalId","fetchGamePlayer","pose","content","date","Date","toLocaleTimeString","JSON","stringify","fetchPose","playerName","gamePlayer","partnerName","setInterval","bind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5246651.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Badge, Button, ListGroup, ToggleButton, ToggleButtonGroup} from 'react-bootstrap';\nimport Questions from '../assets/question_sheet.json';\nimport { GamePlayer } from '../App';\nimport {Popover, OverlayTrigger} from 'react-bootstrap';\n\n\ninterface ActivityProps {\n  player: GamePlayer\n  partner: GamePlayer\n}\n\ninterface Answer {\n  isChecked: boolean,\n  zone: string\n}\n\nenum SendingState {\n  UNSENT,\n  IN_FLIGHT,\n  SENT\n}\n\ninterface ActivityState {\n  answers: Map<number, Answer>,\n  sendingState: SendingState\n}\n\nclass Activity extends React.Component<ActivityProps, ActivityState> {\n\n    constructor(props : ActivityProps) {\n      super(props);\n      let answers = new Map<number, Answer>();\n      Questions.forEach((question, i) => {\n        let response = {isChecked: false, zone: \"?\"} as Answer;\n        answers.set(i, response);\n      })\n      this.state = {\n        answers: answers,\n        sendingState: SendingState.UNSENT\n      };\n    }\n    \n    submitResults = (player: string, partner: string, answers: Array<string>) => {\n      this.setState({\n        sendingState: SendingState.IN_FLIGHT\n      });\n      const requestOptions = {\n        method: 'POST'\n      };\n      fetch(\n        `https://cellulo-live.herokuapp.com/results/?player=${player}&partner=${partner}&answers=${answers.join(',')}`,\n        requestOptions\n        )\n      .then(res => res.json())\n      .then(\n      (res) => {\n          console.log(res);\n      },\n      (error) => { throw new Error(error) })\n      .then((res) => {\n        this.setState({\n          sendingState: SendingState.SENT\n        });\n      });\n    }\n\n    setChecked = (i: number, target: HTMLInputElement) => {\n      let answers = this.state.answers;\n      let playerZone = this.props.player.zone;\n      let answer = answers.get(i);\n      if (answer === undefined) {\n        return;\n      }\n      answer.isChecked = target.checked;\n      answer.zone = target.checked ? playerZone : \"?\";\n      this.setState({\n        answers: answers\n      });\n      target.blur();\n    }\n\n    renderTooltip = (props: any) => (\n      <Popover body {...props}>\n          <div style={{padding: \"10px\", width: \"10rem\"}}>\n            To lock in an answer, you and your partner\n            must select the same organelle using your robots.\n          </div>\n      </Popover>\n    );\n\n    render() {\n      let answers = this.state.answers;\n      let sendingState = this.state.sendingState;\n      let answerList = Array.from(answers.values()).map(val => val.zone);\n      let gamePlayers = [this.props.player, this.props.partner];\n      let inAccordance = this.props.player.zone === this.props.partner.zone;\n      let allAnswered = answerList.every((answer) => answer !== \"?\");\n      console.log(Questions);\n      return  <div style={{paddingLeft: \"20%\", paddingRight: \"20%\", paddingBottom: \"20px\"}}>\n                <Button variant=\"dark\" style={{fontSize: \"1.4rem\", width: \"100%\", marginBottom: \"5px\"}} disabled>\n                  <OverlayTrigger\n                  placement=\"left\"\n                  trigger=\"hover\"\n                  delay={{ show: 250, hide: 400 }}\n                  overlay={this.renderTooltip}>\n                      <Button variant=\"dark\" style={{\"fontSize\": \"0.9em\", \"marginRight\": \"10px\"}}>ⓘ</Button>\n                  </OverlayTrigger>\n                  For each question, move your robot to the organelle on the map that you think\n                  is the correct answer.\n                </Button>           \n                <div></div>    \n                {\n                  Questions.map((question, i) => \n                    <div key={i} style={{marginTop: \"10px\"}}>\n                      <Button variant=\"dark mt-2\" style={{ fontSize: \"1.2rem\", width: \"100%\", textAlign: \"left\", marginBottom: \"15px\", marginTop: \"15px\"}} disabled>\n                      {i+1}. {question.Q}\n                      </Button>\n                        <ToggleButtonGroup \n                          type=\"checkbox\" \n                          style={{alignItems: \"center\",  \n                                  animation: answers.get(i)?.isChecked ? \"\" : \"pulse 1s infinite\",\n                                  width: \"80%\"}}>\n                          {\n                            sendingState === SendingState.SENT ?\n                            <ToggleButton \n                              disabled={sendingState === SendingState.SENT}\n                              value={Questions.length} \n                              style={{pointerEvents: \"none\", marginRight: \"2px\"}}\n                              variant={answers.get(i)?.zone === Questions[i].A ? \"success\" : \"danger\"}>\n                            { answers.get(i)?.zone === Questions[i].A ? \"Correct\" : `Correct answer: ${Questions[i].A}`}\n                            </ToggleButton> : null\n                          }\n                          {\n                            gamePlayers.map((player: GamePlayer, j) =>\n                            <ToggleButton \n                              disabled={sendingState === SendingState.SENT}\n                              value={Questions.length + 1 + j} \n                              style={{pointerEvents: \"none\", marginRight: \"2px\"}}\n                              variant={answers.get(i)?.isChecked ? \"primary\" : inAccordance ? \"info\" : \"light\"}>\n                              {\n                                answers.get(i)?.isChecked ?\n                                `${player.name}: ${answers.get(i)?.zone}`\n                                : `${player.name}: ${player.zone}`\n                              }\n                            </ToggleButton>)\n                          }\n                          <ToggleButton\n                            disabled={sendingState === SendingState.SENT}\n                            id=\"toggle-check\"\n                            checked={answers.get(i)?.isChecked}\n                            variant={answers.get(i)?.isChecked ? \"primary\" : inAccordance ? \"info\" : \"danger\"}\n                            value={i}\n                            style={{pointerEvents: (answers.get(i)?.isChecked ? \"auto\" : inAccordance ? \"auto\" : \"none\")}}\n                            onChange={(e) => this.setChecked(i, e.currentTarget)}>\n                          { \n                            answers.get(i)?.isChecked ? \n                            \"Unlock\" : \n                            inAccordance ? \"Lock in\" : \"Settle on an answer\"\n                          }\n                        </ToggleButton>\n                        </ToggleButtonGroup>\n                    </div>\n                  )\n                }\n                {\n                  sendingState === SendingState.SENT ?\n                  <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\", marginTop: \"20px\"}} disabled>\n                  Thank you for completing the HapticCellulo learning activity. Your participation is highly appreciated!\n                  </Button> : null\n                }\n                <Button\n                  style={{marginTop: \"20px\", width: \"50%\"}}\n                  disabled={!allAnswered || sendingState !== SendingState.UNSENT}\n                  onClick={(e) => this.submitResults(this.props.player.name, this.props.partner.name, answerList)}\n                  variant=\"success\">\n                    { !allAnswered ?\n                      \"Lock in an answer for each question.\" :\n                      sendingState === SendingState.UNSENT ?\n                      \"Submit\" :\n                      sendingState === SendingState.IN_FLIGHT ?\n                      \"Submitting...\" :\n                      \"Submitted\"}\n                </Button>\n              </div>\n    }\n  }\n\n\n\nexport default Activity;","import React from 'react';\n\nfunction Video(props: any) {\n    return <video\n                muted\n                autoPlay\n                playsInline\n                loop\n                src={props.src}\n                height={\"100%\"}\n                width={\"100%\"}\n                style={{ boxShadow: \"0px 1px 17px 0px #ffffff38\", borderRadius: \"5px\"}}>\n            </video>\n}\n\nexport default Video;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface GolgiBodyProps {\n}\n\nconst GolgiBody: FunctionComponent<GolgiBodyProps> = (props: GolgiBodyProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        ## The packaging warehouse of the cell.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        #### Did you know?\n        </ReactMarkdown>\n        <ReactMarkdown>\n        The golgi body is named after its discoverer, Camillo Golgi. It appears as a set of stacked membranes!\n        </ReactMarkdown>\n        <ReactMarkdown>\n        **Read ahead** to find out what this mysterious organelle does.\n        </ReactMarkdown>\n    </Carousel.Item>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        **What does it do?**\n        </ReactMarkdown>\n        <ReactMarkdown>\n        The golgi body helps process and package ***proteins*** and ***lipid*** (fat) molecules.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        In particular, it readies proteins for export, to be jettisoned outside of the cell.\n        </ReactMarkdown>\n    </Carousel.Item>\n    </Carousel>\n};\n\nexport default GolgiBody;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface CytosolProps {\n}\n\nconst Cytosol: FunctionComponent<CytosolProps> = (props: CytosolProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        ## The liquid medium contained within a cell.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        The main component of cytosol is **water**.\n        </ReactMarkdown>\n        <ReactMarkdown>\n        Suspended within the cytosol are various ***organelles*** - move your robot to these to learn more.\n        </ReactMarkdown>\n    </Carousel.Item>\n    <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n        <ReactMarkdown>\n        #### Did you know?\n        </ReactMarkdown>\n        <ReactMarkdown>\n        That's not all! The cytosol also contains **dissolved ions**, **small molecules**, and **proteins**.\n        </ReactMarkdown>\n    </Carousel.Item>\n</Carousel>\n};\n\nexport default Cytosol;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface CytosolProps {\n}\n\nconst Cytosol: FunctionComponent<CytosolProps> = (props: CytosolProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ## The control centre of the cell.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            The nucleus contains most of the cell's genetic material inside DNA structures known as ***chromosomes***.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            Inside the nucleus, DNA is transcribed into ***messenger RNA*** which leaves the nucleus through\n            small pores.\n            </ReactMarkdown>\n        </Carousel.Item>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            The messenger RNA is ***translated*** elsewhere into proteins, which have important\n            roles to play - for instance, controlling your hair colour!\n            </ReactMarkdown>\n            <ReactMarkdown>\n            The nucleus is also responsible for reproduction (AKA ***cell division***).\n            </ReactMarkdown>\n        </Carousel.Item>\n    </Carousel>\n};\n\nexport default Cytosol;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface MitochondrionProps {\n}\n\nconst Mitochondrion: FunctionComponent<MitochondrionProps> = (props: MitochondrionProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n            <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n                <ReactMarkdown>\n                ## The powerhouse of the cell.\n                </ReactMarkdown>\n                <ReactMarkdown>\n                Mitochondria generate the **chemical energy** to power the cell's biochemical reactions.\n                </ReactMarkdown>\n                <ReactMarkdown>\n                This energy is stored in a small molecule called ***ATP: adenosine triphosphate***.\n                </ReactMarkdown>\n            </Carousel.Item>\n            <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n                <ReactMarkdown>\n                **Did you know?**\n                </ReactMarkdown>\n                <ReactMarkdown>\n                Mitochondria contain their own DNA, in the form of small, circular chromosomes. These are only inherited from the mother!\n                </ReactMarkdown>\n            </Carousel.Item>\n        </Carousel>\n};\n\nexport default Mitochondrion;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Carousel from 'react-bootstrap/Carousel'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\n\ninterface LysosomeProps {\n}\n\nconst Lysosome: FunctionComponent<LysosomeProps> = (props: LysosomeProps): any => {\n    /* function body */\n    return <Carousel indicators={false} touch={false} interval={null}>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ## The lord of destruction of the cell.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            Lysosomes contain ***digestive enzymes*** which break down excess or worn-out cell parts.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            They are also involved in a rather morbid process called ***apoptosis***. Read ahead to find out what this is.\n            </ReactMarkdown>\n        </Carousel.Item>\n        <Carousel.Item style={{width: \"70%\", marginLeft: \"15%\", textAlign: \"center\"}}>\n            <ReactMarkdown>\n            ***Apoptosis***: Programmed cell death.\n            </ReactMarkdown>\n            <ReactMarkdown>\n            If the cell is damaged beyond repair, lysosomes can help it self-destruct in a process called apoptosis, or programmed cell death.\n            </ReactMarkdown>\n        </Carousel.Item>\n    </Carousel>\n};\n\nexport default Lysosome;","import React from 'react';\nimport { Figure, Spinner, Badge } from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\nimport GolgiBody from './GolgiBody';\nimport Cytosol from './Cytosol';\nimport Nucleus from './Nucleus';\nimport Mitochondrion from './Mitochondrion';\nimport {Popover, OverlayTrigger, Button} from 'react-bootstrap';\nimport Lysosome from './Lysosome';\n\ninterface LocationProps {\n    x: number,\n    y: number,\n    theta: number,\n    zone: string,\n    src: string,\n    lastFetched: string | null,\n    name: string\n}\n\nfunction getOrganelleCarousel(zone: string) {\n    switch (zone) {\n        case \"golgiBody\":\n            return <GolgiBody/>;\n        case \"nucleus\":\n            return <Nucleus/>;\n        case \"lysosome\":\n            return <Lysosome/>;\n        case \"mitochondrion\":\n            return <Mitochondrion/>;\n        case \"cytosol\":\n        case \"undefined\":\n            return <Cytosol/>;\n        default:\n            throw new Error(\"Undefined behaviour for zone: \" + zone);\n    }\n}\n\nconst renderTooltip = (props: any) => (\n    <Popover body {...props}>\n        <div style={{padding: \"10px\", width: \"10rem\"}}>\n            A description of the organelle which your robot is currently\n            located on.\n        </div>\n    </Popover>\n);\n\n\nconst Location: FunctionComponent<LocationProps> = (props: LocationProps): any => {\n    return  <div style={{paddingBottom: \"10px\"}}>\n                <Figure style={{marginBottom: \"-3px\", marginTop: \"-5px\"}}>\n                    <Video src={props.src}></Video>\n                </Figure>\n                <Button variant=\"dark mt-2\" style={{fontSize: \"0.7em\", width: \"100%\", textAlign: \"left\"}} disabled>\n                    {\n                        <OverlayTrigger\n                        placement=\"left\"\n                        trigger=\"hover\"\n                        delay={{ show: 250, hide: 400 }}\n                        overlay={renderTooltip}>\n                            <Button variant=\"dark\" style={{\"fontSize\": \"0.9em\", \"display\": \"block\"}}>ⓘ</Button>\n                        </OverlayTrigger>\n                    }\n                    {getOrganelleCarousel(props.zone)}\n                </Button>\n                <Button variant=\"dark mt-2\" style={{ fontSize: \"1rem\", width: \"100%\" }} disabled>\n                    <Spinner animation=\"grow\" variant=\"light\" size=\"sm\" style={{ marginRight: \"3%\" }} />\n                    Last updated at {props.lastFetched === null ? \"\" : props.lastFetched}\n                </Button>\n            </div>\n};\n\nexport default Location;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Activity from './components/Activity';\nimport {Tab, Tabs, Modal, Button, Form} from 'react-bootstrap';\nimport { GamePlayer } from './App';\nimport LocationComponent from './components/LocationComponent';\nimport Checklist from './components/UI/Checklist';\n\ninterface MainDisplayState {\n  mode: Mode,\n  key: string\n  showModal: boolean\n  startedQuiz: boolean\n}\n\ninterface MainDisplayProps {\n  player: GamePlayer\n  partner: GamePlayer\n}\n\nenum Mode {\n  Test,\n  Explore,\n}\n\nclass MainDisplay extends React.Component<MainDisplayProps, MainDisplayState> {\n\n  constructor(props: MainDisplayProps) {\n    super(props);\n    this.state = {\n      mode: Mode.Explore,\n      key: \"explore\",\n      showModal: false,\n      startedQuiz: false\n    };\n  }\n\n  changeMode(mode: Mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  setKey(key: string | null) {\n    let desiredKey = key;\n    let showModal = key === \"quiz\" ? true : false;\n    this.setState({\n      key: desiredKey === null ? \"explore\" : desiredKey,\n      showModal: showModal\n    });\n  }\n\n  startQuiz = () => {\n    this.setState({\n      showModal: false,\n      startedQuiz: true\n    });\n  }\n\n  keepExploring = () => {\n    this.setState({\n      key: \"explore\",\n      showModal: false\n    });\n  }\n\n  render() {\n    let key = this.state.key;\n    let showModal = this.state.showModal;\n    let startedQuiz = this.state.startedQuiz;\n    console.log(\"ActiveKey:\");\n    console.log(key);\n    return (\n      <div className=\"App\">\n              <h2 style={{paddingTop: \"15px\", color: \"#b9b9b9\", fontFamily: \"helvetica\"}}>\n              Haptic Cellulo\n              </h2>\n              <Tabs activeKey={key}  \n              onSelect={(k) => this.setKey(k)}\n              style={{marginTop: \"-20px\", marginBottom: \"30px\", fontSize: \"1rem\", width: \"65%\"}}>\n                  <Tab eventKey=\"explore\" \n                    title=\"Explore Cell Map\" \n                    disabled={startedQuiz ? true : false}>\n                        <div className=\"gridContainer\" style={{borderRadius: \"10px\", margin: \"0%\"}}>\n                          <div className=\"guideBox\">\n                            <Checklist/>\n                          </div>\n                          <div className=\"mainApp\">\n                            <LocationComponent player={this.props.player} partner={this.props.partner}/>\n                          </div>\n                        </div>\n                  </Tab>\n                  <Tab \n                  eventKey=\"quiz\" \n                    title=\"Start Quiz\"\n                    disabled={startedQuiz ? true : false}\n                    >\n                    <Activity player={this.props.player} partner={this.props.partner}></Activity>\n                  </Tab>\n                </Tabs>\n                <Modal\n                  show={showModal}\n                  backdrop=\"static\"\n                  keyboard={false}>\n                <Modal.Header \n                  closeButton>\n                  <Modal.Title>Quiz</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  Are you ready to start the quiz? Once you begin, you cannot return\n                  to the learning activity.\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button \n                    variant=\"secondary\" \n                    onClick={this.keepExploring}>\n                    Keep exploring\n                  </Button>\n                  <Button \n                    variant=\"primary\" \n                    onClick={this.startQuiz}>\n                      Yes, start the quiz\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n      </div>\n    );\n  }\n\n  renderContent() {\n    return  \n  }\n}\n\nexport default MainDisplay;\n","export default __webpack_public_path__ + \"static/media/nucleus.ddd8d8e8.mp4\";","export default __webpack_public_path__ + \"static/media/mitochondrion.e87f2a95.mp4\";","export default __webpack_public_path__ + \"static/media/golgi_body.48b36d1d.mp4\";","export default __webpack_public_path__ + \"static/media/lysosome.6aab8551.mp4\";","export default __webpack_public_path__ + \"static/media/cytosol.5d6e8b37.mp4\";","import React from 'react';\nimport Span from 'react-bootstrap';\nimport Location from './UI/Location';\nimport nucleusGraphic from '../assets/nucleus.mp4';\nimport mitochondrionGraphic from '../assets/mitochondrion.mp4';\nimport golgiBodyGraphic from '../assets/golgi_body.mp4';\nimport lysosomeGraphic from '../assets/lysosome.mp4';\nimport undefinedGraphic from '../assets/cytosol.mp4';\nimport Captions from '../assets/captions.json';\nimport {GamePlayer} from '../App';\n\ninterface OrganelleData {\n  graphic: string\n}\n\ninterface OrganelleStore {\n  [index: string]: OrganelleData;\n}\n\nlet organelles = {\n  \"nucleus\" : {graphic: nucleusGraphic},\n  \"mitochondrion\": {graphic: mitochondrionGraphic},\n  \"golgiBody\": {graphic: golgiBodyGraphic},\n  \"lysosome\": {graphic: lysosomeGraphic},\n  \"?\": {graphic: undefinedGraphic},\n  \"cytosol\": {graphic: undefinedGraphic}\n} as OrganelleStore;\n\ninterface LocationComponentState {\n}\n\ninterface LocationComponentProps {\n  player: GamePlayer\n  partner: GamePlayer\n}\n\nclass LocationComponent extends React.Component<LocationComponentProps, LocationComponentState> {\n\n    constructor(props: any) {\n      super(props);\n      this.state = {};\n    }\n    \n    render() {\n      return <div>\n        \n        <Location\n          src={organelles[this.props.player.zone].graphic} \n          lastFetched={this.props.player.lastFetched}\n          name={this.props.player.name}\n          x={this.props.player.x}\n          y={this.props.player.y}\n          theta={this.props.player.theta}\n          zone={this.props.player.zone === \"?\" ? \"cytosol\" : this.props.player.zone}>\n        </Location>\n      </div>;\n    }\n  }\nexport default LocationComponent;","import React from 'react';\nimport { Figure, Spinner, Badge, Alert, Button, Tooltip, Popover, OverlayTrigger } from 'react-bootstrap';\nimport Header from 'react-bootstrap/Popover';\nimport Body from 'react-bootstrap/Popover';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport Form from 'react-bootstrap/Form'\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\nimport ReactMarkdown from 'react-markdown'\nimport internal from 'stream';\n\ninterface ChecklistProps {\n}\n\ninterface ChecklistState {\n    isChecked: Map<number, boolean>\n}\n\nlet points = [\n    \"Find out who discovered the golgi body\",\n    \"Establish what the cytosol is composed of\",\n    \"Locate the control centre of the cell\",\n    \"Find the energy centre of the cell\",\n    \"Pinpoint the organelle with digestive enzymes\",\n]\n\nclass Checklist extends React.Component<ChecklistProps, ChecklistState> {\n\n    constructor(props: any) {\n        super(props);\n        let isChecked = new Map<number, boolean>();\n        points.forEach((question, i) => {\n          isChecked.set(i, false);\n        })\n        this.state = {\n            isChecked\n        };\n    }\n\n    setChecked = (i: number, target: HTMLInputElement) => {\n        let isChecked = this.state.isChecked;\n        isChecked.set(i, target.checked);\n        this.setState({\n          isChecked: isChecked\n        });\n    }\n\n    renderTooltip = (props: any) => (\n        <Popover body {...props}>\n            <div style={{padding: \"10px\", width: \"10rem\"}}>\n                A checklist of points you should explore together\n                before starting the quiz.\n            </div>\n        </Popover>\n    );\n\n    /* function body */\n    render() {\n        let isChecked = this.state.isChecked;\n        return <Form style={{fontSize: \"1rem\", color: \"#b9b9b9\", padding: \"1em\", backgroundColor: \"#343a40\",\n            borderRadius: \"10px\", fontFamily: \"helvetica\"}}>\n            <OverlayTrigger\n                placement=\"left\"\n                trigger=\"hover\"\n                delay={{ show: 250, hide: 400 }}\n                overlay={this.renderTooltip}>\n            <Button variant=\"dark\" style={{\"fontSize\": \"0.9em\", \"display\": \"block\"}}>ⓘ</Button>\n            </OverlayTrigger>\n            <h4 style={{\"display\": \"block\"}}>\n            Tasks\n            </h4>\n            {\n                points.map((point: string, i: number) => \n                    <div key={i} className=\"mb-3\">\n                        <Form.Check type={'checkbox'} label={point} onChange={(e) => this.setChecked(i, e.currentTarget)} />\n                    </div>\n                )\n            }\n            {\n                Array.from(isChecked.values()).every(val => val) ?\n                <Button variant=\"success\" style={{pointerEvents: \"none\"}}>Great! You can start the quiz.</Button> :\n                null\n            }\n        </Form>\n    }\n}\n\nexport default Checklist;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport RobotDisplay from './components/RobotDisplay';\nimport Activity from './components/Activity';\nimport {Tab, Tabs, Modal, Button} from 'react-bootstrap';\nimport MainDisplay from './MainDisplay';\n\nexport interface GamePlayer {\n  name: string\n  zone: string\n  x: number\n  y: number\n  theta: number\n  lastFetched: string\n}\n\ninterface State {\n  player: GamePlayer\n  partner: GamePlayer\n}\n\ninterface Props {\n}\n\nfunction getQuery(query : string, required: boolean = true) {\n  let result = new URLSearchParams(window.location.search).get(query);\n  if (required && result === null) {\n    throw new Error(`Query parameter ${query} not provided`);\n  }\n  return result;\n}\n\nclass App extends React.Component<Props,State> {\n\n  intervalId: any = 0;\n  constructor(props: Props) {\n    super(props);\n    let player = {\n      name: getQuery('player'),\n      zone: \"?\",\n      x: 0,\n      y: 0,\n      theta: 0,\n      lastFetched: \"Not fetched\"\n    } as GamePlayer;\n    let partner = {\n      name: getQuery('partner'),\n      zone: \"?\",\n      x: 0,\n      y: 0,\n      theta: 0,\n      lastFetched: \"Not fetched\"\n    } as GamePlayer;\n    this.state = {\n      player: player,\n      partner: partner\n    };\n  }\n\n  fetchGamePlayer = (name: string) => {\n    return fetch(`https://cellulo-live.herokuapp.com/pose?name=${name}`)\n    .then(res => res.json())\n    .then(\n    (res) => {\n        if (res.type === 'success') {\n            let pose = res.content;\n            var date = new Date();\n            let result = {\n              name: name,\n              zone: pose.zone,\n              x: pose.x,\n              y: pose.y,\n              theta: pose.theta,\n              lastFetched: date.toLocaleTimeString('en-US'),\n            } as GamePlayer;\n            return result;\n        } else {\n            console.log(\"Non-success:\" + JSON.stringify(res));\n        }\n    },\n    // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    (error) => { throw new Error(error) });\n  }\n\n  fetchPose = () => {\n    console.log(this.state);\n    let playerName = this.state.player.name;\n    this.fetchGamePlayer(playerName)\n    .then((gamePlayer: GamePlayer | undefined) => {\n      if (gamePlayer !== undefined) {\n        this.setState({\n          player: gamePlayer\n        });\n      }\n    });\n    let partnerName = this.state.partner.name;\n    this.fetchGamePlayer(partnerName)\n    .then((gamePlayer: GamePlayer | undefined) => {\n      if (gamePlayer !== undefined) {\n        this.setState({\n          partner: gamePlayer\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n      this.intervalId = setInterval(this.fetchPose.bind(this), 500);\n      this.fetchPose();\n  }\n\n  render() {\n    console.log(this.state);\n    let {player, partner} = this.state;\n    return (\n      <MainDisplay player={player} partner={partner}></MainDisplay>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}