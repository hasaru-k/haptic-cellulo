{"version":3,"sources":["components/Video.tsx","App.tsx","components/Location.tsx","assets/nucleus.mp4","assets/mitochondrion.mp4","assets/golgi_body.mp4","components/RobotMap.tsx","components/RobotDisplay.tsx","components/Activity.tsx","reportWebVitals.js","index.js"],"names":["Video","Mode","props","muted","autoPlay","playsInline","loop","src","height","width","style","display","boxShadow","borderRadius","Location","console","log","x","y","Figure","Caption","marginTop","caption","Button","variant","fontSize","disabled","Spinner","animation","size","marginRight","Math","round","theta","lastFetched","RobotMap","intervalId","state","error","isLoaded","location","nucleus","pose","this","setState","mitochondrion","golgi_body","a","name","fetch","then","res","json","type","content","date","Date","toLocaleTimeString","updateLocation","JSON","stringify","setInterval","fetchPose","bind","message","String","Number","React","Component","RobotDisplay","robots","selectedRobot","queryRobot","robot","marginBottom","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","renderFromQueryString","renderFromApi","Activity","responses","Questions","question","Q","ListGroup","horizontal","color","justifyContent","alignItems","Item","getQuery","query","URLSearchParams","window","search","get","App","mode","Explore","className","renderContent","renderExplore","Test","renderTest","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cd65690.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Video(props: any) {\n    return <video\n                muted\n                autoPlay\n                playsInline\n                loop\n                src={props.src}\n                height={\"100%\"}\n                width={\"100%\"}\n                style={{\n                    display: \"block\",\n                    boxShadow: \"0px 1px 17px 0px #ffffff38\",\n                    borderRadius: \"5px\"}}>\n            </video>\n}\n\nexport default Video;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport RobotDisplay from './components/RobotDisplay';\nimport Activity from './components/Activity';\n\ninterface State {\n  mode: Mode,\n}\n\ninterface Props {\n}\n\nenum Mode {\n  Test,\n  Explore,\n}\n\nfunction getQuery(query : string) {\n  return new URLSearchParams(window.location.search).get(query);\n}\n\nclass App extends React.Component<Props,State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      mode: Mode.Explore\n    };\n  }\n\n  changeMode(mode: Mode) {\n    this.setState({\n      mode: mode\n    });\n  }\n\n  render() {\n    let mode = this.state.mode;\n    console.log(mode);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p></p>\n          <div className=\"container\">\n            {this.renderContent(mode)}\n          </div>\n        </header>\n      </div>\n    );\n  }\n\n  renderExplore() {\n    return <div className=\"row\">\n              <div className=\"col\">\n                <RobotDisplay queryRobot={getQuery('left')}></RobotDisplay>\n              </div>\n              <div className=\"col offset-1\">\n                <RobotDisplay queryRobot={getQuery('right')}></RobotDisplay>\n              </div>\n            </div>\n  }\n\n  renderTest() {\n    return <div className=\"row\">\n              <div className=\"col\">\n                <Activity robots={[]}></Activity>\n              </div>\n           </div>\n  }\n\n  renderContent(mode : Mode) {\n    switch (mode) {\n      case Mode.Explore:\n        return this.renderExplore();\n      case Mode.Test:\n        return this.renderTest();\n      default:\n        throw \"Unknown mode \" + mode;  \n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {Figure, Spinner, Badge, Alert, Button} from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\nimport Video from './Video';\nimport { FunctionComponent } from 'react'; // importing FunctionComponent\n\ninterface LocationProps {\n    x: number,\n    y: number,\n    theta: number,\n    src: string,\n    caption: string,\n    lastFetched: string | null,\n    name: string\n}\n\nconst Location: FunctionComponent<LocationProps> = (props: LocationProps): any => { \n    /* function body */ \n    console.log(`x=${props.x},y=${props.y}`);\n    return <div>\n                <Figure>\n                    <Video src={props.src}></Video>\n                    <Figure.Caption style={{marginTop: \"10px\"}}>\n                    {props.caption}\n                    </Figure.Caption>\n                </Figure>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>\n                    <Spinner animation=\"grow\" variant=\"light\" size=\"sm\" style={{marginRight: \"3%\"}} />\n                    Location: (x={Math.round(props.x)}, y={Math.round(props.y)}, theta={Math.round(props.theta)})\n                </Button>\n                <Button variant=\"dark\" style={{fontSize: \"1rem\", width: \"100%\"}} disabled>Last updated at {props.lastFetched === null ? \"\" : props.lastFetched}</Button>\n            </div>\n};\n\nexport default Location;","export default __webpack_public_path__ + \"static/media/nucleus.4a8c0d4e.mp4\";","export default __webpack_public_path__ + \"static/media/mitochondrion.e87f2a95.mp4\";","export default __webpack_public_path__ + \"static/media/golgi_body.810b2da0.mp4\";","import React from 'react';\nimport {Alert, Spinner, Badge} from 'react-bootstrap';\nimport Span from 'react-bootstrap';\nimport Location from './Location';\nimport nucleus from '../assets/nucleus.mp4';\nimport mitochondrion from '../assets/mitochondrion.mp4';\nimport golgi_body from '../assets/golgi_body.mp4';\n\nclass RobotMap extends React.Component<any,any> {\n\n    intervalId: any = 0;\n    constructor(props: any) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: \"\",\n        y: \"\",\n        theta: \"\",\n        location: nucleus,\n        caption: \"Location: nucleus. The knowledge centre of the cell.\",\n        lastFetched: null\n      };\n    }\n\n    updateLocation(pose: any) {\n      if (pose.x < 15) {\n        this.setState({\n          location: nucleus,\n          caption: \"The knowledge centre of the cell.\"\n        });\n      } else if (pose.x < 100) {\n        this.setState({\n          location: mitochondrion,\n          caption: `The powerhouse of the cell.`\n        });\n      } else {\n        this.setState({\n          location: golgi_body,\n          caption: \"The packaging warehouse of the cell.\"\n        });\n      }\n    }\n\n  async fetchPose() {\n        const name = this.props.name;\n        fetch(`https://cellulo-live.herokuapp.com/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let pose = res.content;\n                    var date = new Date();\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta,\n                        lastFetched: date.toLocaleTimeString('en-US')\n                    });\n                    this.updateLocation(pose);\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error: error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.intervalId = setInterval(this.fetchPose.bind(this), 500);\n        this.fetchPose();\n    }\n\n    render() {\n      const { error, isLoaded, x, y, theta, location, caption, lastFetched } = this.state;\n      if (this.props.name === \"bloop\") {\n        console.log(`x=${x},y=${y}`);\n      }\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <Location \n                src={location} \n                caption={String(caption)} \n                lastFetched={String(lastFetched)}\n                name={String(this.props.name)}\n                x={Number(x)}\n                y={Number(y)}\n                theta={Number(theta)}>\n            </Location>\n          </div>\n        );\n      }\n    }\n  }\nexport default RobotMap;","import React from 'react';\nimport {Form, Badge, Button} from 'react-bootstrap';\nimport RobotMap from './RobotMap';\n\ninterface RobotDisplayProps {\n  queryRobot: string | null,\n}\n\ninterface RobotDisplayState {\n  isLoaded: boolean,\n  robots: Array<string>,\n  selectedRobot: string,\n  error: any,\n}\n\nclass RobotDisplay extends React.Component<RobotDisplayProps, RobotDisplayState> {\n\n    constructor(props: RobotDisplayProps) {\n      super(props);\n      this.state = {\n        isLoaded: false,\n        robots: [],\n        selectedRobot: \"\",\n        error: null\n      };\n    }\n\n    componentDidMount() {\n      if (this.props.queryRobot != null) {\n        return;\n      }\n      fetch(`https://cellulo-live.herokuapp.com/robots/`)\n          .then(res => res.json())\n          .then(\n          (res) => {\n              if (res.type === 'success') {\n                  let robots = res.content;\n                  this.setState({\n                      isLoaded: true,\n                      robots: robots,\n                      selectedRobot: robots[0]\n                  });                    \n              } else {\n                  console.log(\"Non-success:\" + JSON.stringify(res));\n              }\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n              this.setState({\n              isLoaded: true,\n              error\n              });\n          }\n          )\n        \n    }\n\n    setSelectedRobot(robot: string) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n\n    renderFromQueryString() {\n      let name = this.props.queryRobot;\n      return (\n        <div>\n            <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n              Player {name}\n            </Button>\n            <RobotMap name={name}></RobotMap> \n        </div>\n      );\n    }\n\n    renderFromApi() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n              <RobotMap name={selectedRobot}></RobotMap> \n              <Form.Group>\n                  <Form.Label>Tracking player:</Form.Label>\n                  <Form.Control as=\"select\"\n                    onChange={e => this.setSelectedRobot(e.target.value)}>\n                  {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                  </Form.Control>\n              </Form.Group>\n          </div>\n        );      \n      }\n    }\n  \n    render() {\n      if (this.props.queryRobot != null) {\n        return this.renderFromQueryString();\n      }\n      return this.renderFromApi();\n    }\n  }\n\n\n\nexport default RobotDisplay;","import React from 'react';\nimport {Form, Badge, Button, ListGroup} from 'react-bootstrap';\nimport Questions from '../assets/questions.json';\n\ninterface ActivityProps {\n  robots: Array<string>\n}\n\ninterface Response {\n  number: Number,\n  selection: Number\n}\n\ninterface ActivityState {\n  responses: Array<Response>\n}\n\nclass Activity extends React.Component<ActivityProps, ActivityState> {\n\n    constructor(props : ActivityProps) {\n      super(props);\n      this.state = {\n        responses : []\n      };\n    }\n\n    componentDidMount() {\n    }\n  \n    render() {\n      let responses = this.state.responses;\n      console.log(Questions);\n      return  <div>\n                <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                  Learning Activity\n                </Button>\n                <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                  For each question, place your robot to the organelle on the map\n                    that you consider to be the correct answer.\n                </Button>                \n                <div>\n                </div>\n                {\n                  Questions.map((question, i) => \n                    <div key={i}>\n                      <Button variant=\"dark\" style={{fontSize: \"1.5rem\", width: \"100%\", marginBottom: \"20px\"}} disabled>\n                        {i+1}. {question.Q}\n                      </Button>\n                      <div></div>\n                        <ListGroup horizontal style={{color: \"black\", display: \"flex\", \n                            justifyContent: \"center\", alignItems: \"center\"}}>\n                          <ListGroup.Item>Robot A says: Mitochondria</ListGroup.Item>)\n                          <ListGroup.Item>Robot B says: Ribosomes</ListGroup.Item>)\n                        </ListGroup>\n                    </div>\n                  )\n                }\n              </div>\n    }\n  }\n\n\n\nexport default Activity;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}