{"version":3,"sources":["assets/pastel2.png","components/Location.jsx","assets/nucleus.png","assets/rough_er.png","assets/golgi_body.png","components/RobotMap.jsx","components/RobotDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["Location","props","Figure","Image","width","height","src","style","backgroundImage","pastel2","backgroundPosition","backgroundSize","Caption","caption","RobotMap","state","error","isLoaded","x","y","theta","location","nucleus","pose","this","setState","rough_er","golgi_body","name","fetch","then","res","json","type","console","log","content","updateLocation","JSON","stringify","fetchPose","prevProps","message","Alert","variant","React","Component","RobotDisplay","robots","selectedRobot","robot","Form","Group","Label","Control","as","onChange","e","setSelectedRobot","target","value","map","i","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b74911a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pastel2.e1c70db9.png\";","import React from 'react';\nimport {Figure} from 'react-bootstrap';\nimport pastel2 from '../assets/pastel2.png';\n\nfunction Location(props) {\n    return  <Figure>\n                <Figure.Image\n                    width={300}\n                    height={300}\n                    src={props.src}\n                    style={{backgroundImage: `url(${pastel2})`,\n                            backgroundPosition: \"center\",\n                            backgroundSize: \"cover\"}}\n                />\n                <Figure.Caption>\n                {props.caption}\n                </Figure.Caption>\n            </Figure>\n}\n\nexport default Location;","export default __webpack_public_path__ + \"static/media/nucleus.81526294.png\";","export default __webpack_public_path__ + \"static/media/rough_er.bbb51e52.png\";","export default __webpack_public_path__ + \"static/media/golgi_body.21e0144f.png\";","import React from 'react';\nimport {Alert} from 'react-bootstrap';\nimport Location from './Location';\nimport nucleus from '../assets/nucleus.png';\nimport rough_er from '../assets/rough_er.png';\nimport golgi_body from '../assets/golgi_body.png';\n\nclass RobotMap extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        x: \"\",\n        y: \"\",\n        theta: \"\",\n        location: nucleus,\n        caption: \"Location: nucleus. The knowledge centre of the cell.\"\n      };\n    }\n\n    updateLocation(pose) {\n      if (pose.x < 50) {\n        this.setState({\n          location: nucleus,\n          caption: \"Location: nucleus. The knowledge centre of the cell.\"\n        });\n      } else if (pose.x < 100) {\n        this.setState({\n          location: rough_er,\n          caption: `Location: rough endoplasmic reticulum. Tiny ribosomes cling to the endoplasmic reticulum, injecting\"\n                    proteins into it.`\n        });\n      } else {\n        this.setState({\n          location: golgi_body,\n          caption: \"Location: golgi body. The packaging warehouse of the cell.\"\n        });\n      }\n    }\n\n    fetchPose() {\n        const name = this.props.name;\n        fetch(`/pose?name=${name}`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    console.log(res);\n                    let pose = res.content;\n                    console.log(pose);\n                    this.setState({\n                        isLoaded: true,\n                        x: pose.x,\n                        y: pose.y,\n                        theta: pose.theta\n                    });\n                    this.updateLocation(pose);\n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n            )\n    }\n\n    componentDidMount() {\n        this.fetchPose();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.name !== this.props.name) {\n          this.fetchPose();\n        }\n    }\n  \n    render() {\n      const { error, isLoaded, x, y, theta, location, caption } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <div>\n            <Location src={location} caption={caption}></Location>\n            <Alert variant=\"info\">\n              {this.props.name} is at (x={x},y={y},theta={theta})\n            </Alert>\n          </div>\n        );\n      }\n    }\n  }\nexport default RobotMap;","import React from 'react';\nimport {Form} from 'react-bootstrap';\nimport RobotMap from './RobotMap';\n\nclass RobotDisplay extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        isLoaded: false,\n        robots: [],\n        selectedRobot: \"\"\n      };\n    }\n\n    componentDidMount() {\n        fetch(`/robots/`)\n            .then(res => res.json())\n            .then(\n            (res) => {\n                if (res.type === 'success') {\n                    let robots = res.content;\n                    this.setState({\n                        isLoaded: true,\n                        robots: robots,\n                        selectedRobot: robots[0]\n                    });                    \n                } else {\n                    console.log(\"Non-success:\" + JSON.stringify(res));\n                }\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n                this.setState({\n                isLoaded: true,\n                error\n                });\n            }\n            )\n    }\n\n    setSelectedRobot(robot) {\n      this.setState({\n        selectedRobot: robot\n      });\n    }\n  \n    render() {\n      const { error, isLoaded, robots, selectedRobot } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n            <div>\n                <RobotMap name={selectedRobot}></RobotMap> \n                <Form.Group>\n                    <Form.Label>Tracking player:</Form.Label>\n                    <Form.Control as=\"select\"\n                      onChange={e => this.setSelectedRobot(e.target.value)}>\n                    {robots.map((robot,i) => <option key={i}>{robot}</option>)}\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n      }\n    }\n  }\nexport default RobotDisplay;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport RobotDisplay from './components/RobotDisplay';\n\nlet url = \"http://cellulo-live.herokuapp.com/pose\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p></p>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm\">\n              <RobotDisplay></RobotDisplay>\n            </div>\n            <div className=\"col-sm\">\n              <RobotDisplay></RobotDisplay>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}